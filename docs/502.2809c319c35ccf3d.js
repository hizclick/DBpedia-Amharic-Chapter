(self.webpackChunkam_dbpedia_org=self.webpackChunkam_dbpedia_org||[]).push([[502],{8502:(F,E,i)=>{"use strict";i.r(E),i.d(E,{DocumentationsModule:()=>L});var h=i(6814),y=i(266),e=i(5879),d=i(5433),a=i(2651),l=i(4669);const w=function(){return["/documentations/sparql-for-beginners"]},m=function(){return["/documentations/query-am-dbpedia"]},x=function(){return["/documentations/running-dief-extractor"]},P=function(){return["/documentations/query-amharic-dbpedia"]};let I=(()=>{class g{static{this.\u0275fac=function(f){return new(f||g)}}static{this.\u0275cmp=e.Xpm({type:g,selectors:[["app-documentation-layout"]],decls:19,vars:8,consts:[[1,"documentation-container"],["mode","side","opened",""],["role","list"],["role","listitem",1,"list-item"],[3,"routerLink"]],template:function(f,Z){1&f&&(e.TgZ(0,"div"),e._UZ(1,"app-nav-bar"),e.TgZ(2,"mat-sidenav-container",0)(3,"mat-sidenav",1)(4,"mat-list",2)(5,"mat-list-item",3)(6,"a",4),e._uU(7,"Basics of SPARQL "),e.qZA()(),e.TgZ(8,"mat-list-item",3)(9,"a",4),e._uU(10,"Querying Amharic DBpedia"),e.qZA()(),e.TgZ(11,"mat-list-item",3)(12,"a",4),e._uU(13,"Running DIEF Framework"),e.qZA()(),e.TgZ(14,"mat-list-item",3)(15,"a",4),e._uU(16,"Adding New Mapping"),e.qZA()()()(),e.TgZ(17,"mat-sidenav-content"),e._UZ(18,"router-outlet"),e.qZA()()()),2&f&&(e.xp6(6),e.Q6J("routerLink",e.DdM(4,w)),e.xp6(3),e.Q6J("routerLink",e.DdM(5,m)),e.xp6(3),e.Q6J("routerLink",e.DdM(6,x)),e.xp6(3),e.Q6J("routerLink",e.DdM(7,P)))},dependencies:[d.w,a.JX,a.TM,a.Rh,y.lC,y.rH,l.i$,l.Tg],styles:[".documentation-container[_ngcontent-%COMP%]{position:absolute;height:100%}mat-sidenav[_ngcontent-%COMP%]{display:flex;align-items:center;height:100%}mat-sidenav[_ngcontent-%COMP%]   a[_ngcontent-%COMP%]{color:#000;text-decoration:none}mat-sidenav[_ngcontent-%COMP%]   mat-list[_ngcontent-%COMP%]{height:100%;margin:2rem;padding:2.5rem}mat-sidenav[_ngcontent-%COMP%]   mat-list[_ngcontent-%COMP%]   .list-item[_ngcontent-%COMP%]{padding:1rem 0}"]})}}return g})();i(9138),i(5017),i(787),i(1504),i(3646);let t=(()=>{class g{constructor(b){this.platformId=b}highlightAll(){(0,h.NF)(this.platformId)&&Prism.highlightAll()}static{this.\u0275fac=function(f){return new(f||g)(e.LFG(e.Lbi))}}static{this.\u0275prov=e.Yz7({token:g,factory:g.\u0275fac})}}return g})();var o=i(617);const s=function(){return["/documentations/sparql-for-beginners"]},u=[{path:"",component:I,children:[{path:"sparql-for-beginners",component:(()=>{class g{constructor(b,f){this.highLightService=b,this.renderer=f,this._styleElement=this.renderer.createElement("link"),this._scriptElement=this.renderer.createElement("script"),this._highlighted=!1}ngOnInit(){this._loadScript("../../../assets/scripts/prism.js"),this._styleElement.rel="stylesheet",this._styleElement.href="../../../assets/css/prism.css",this.renderer.appendChild(document.head,this._styleElement)}ngAfterViewInit(){this._highlighted||(this.highLightService.highlightAll(),this._highlighted=!0)}ngOnDestroy(){this._styleElement&&this.renderer.removeChild(document.head,this._styleElement)}_loadScript(b){this._scriptElement=this.renderer.createElement("script"),this._scriptElement.src=b,this._scriptElement.type="text/javascript",this._scriptElement.async=!0,this.renderer.appendChild(document.body,this._scriptElement)}static{this.\u0275fac=function(f){return new(f||g)(e.Y36(t),e.Y36(e.Qsj))}}static{this.\u0275cmp=e.Xpm({type:g,selectors:[["app-sparql-for-beginners-documentation"]],decls:267,vars:0,consts:[[1,"documentation-content-container"],[1,"title"],[1,"subtitle"],[1,"documentation-content"],[1,"paragraph"],[1,"sub-section-title"],["href","https://en.wikipedia.org/wiki/Semantic_triple","target","_blank","rel","noopener noreferrer"],[1,"code-snippet-container"],[1,"code-snippet-header"],[1,"language-sparql"],[1,"subsection-title"],[1,"highlight-language-keyword"],["href","https://dbpedia.org/ontology/Film","target","_blank","rel","noopener noreferrer"],["href","http://dbpedia.org/ontology/Film","target","_blank","rel","noopener noreferrer"],["href","http://xmlns.com/foaf/0.1/name","target","_blank","rel","noopener noreferrer"],[1,"highlight-language-clause"],[1,"paragraph","closing-remarks"],[1,"resources"],[1,"footer"],[1,"author"],[1,"date"]],template:function(f,Z){1&f&&(e.TgZ(0,"div",0)(1,"h1",1),e._uU(2,"Querying using SPARQL for Beginners"),e.qZA(),e._UZ(3,"h2",2),e.TgZ(4,"div",3)(5,"div",4)(6,"h3",5),e._uU(7,"Getting Started"),e.qZA(),e.TgZ(8,"p"),e._uU(9," Before diving into the details of how to structure a SPARQL query, it\u2019s important to understand the basics of how SPARQL works. At its core, SPARQL is all about querying data that\u2019s structured in triples. A "),e.TgZ(10,"a",6),e._uU(11,"triple"),e.qZA(),e._uU(12," is the most fundamental unit of data in RDF (Resource Description Framework), and it consists of three parts: the subject, predicate, and object. "),e._UZ(13,"br")(14,"br"),e._uU(15,'You can think of triples like a simple sentence. The subject is what the sentence is about, the predicate is the characteristic or property of the subject, and the object is the value of that property. For example, in the triple <Movie1> <hasTitle> "Titanic", <Movie1> is the subject, <hasTitle> is the predicate, and "Titanic" is the object. In SPARQL, variables are used to stand in for the parts of these triples that you\'re interested in. '),e.qZA()(),e.TgZ(16,"div",4)(17,"h3",5),e._uU(18,"Variables"),e.qZA(),e._uU(19," Variables in SPARQL are denoted by a question mark (?) before the name, like ?movie, ?title, or ?releaseDate. These variables allow you to ask the database for any triples that match certain patterns. For instance, if you wanted to retrieve all triples in a dataset, you could write a simple query using variables for the subject, predicate, and object, like so: "),e.qZA(),e.TgZ(20,"div",7),e._UZ(21,"div",8),e.TgZ(22,"pre")(23,"code",9),e._uU(24,"\n        SELECT ?s ?p ?o "),e._UZ(25,"br"),e._uU(26,"\n        WHERE { "),e._UZ(27,"br"),e._uU(28,"\n        ?s ?p ?o . "),e._UZ(29,"br"),e._uU(30,"\n        }\n      "),e.qZA(),e._uU(31,"\n      "),e.qZA()(),e.TgZ(32,"div",4)(33,"p"),e._uU(34," In this query, ?s, ?p, and ?o represent the subject, predicate, and object of every triple in the dataset. When this query runs, it returns a list of all the triples, essentially giving you a snapshot of the entire dataset. It\u2019s a powerful way to start exploring your data and understanding the structure of the information you're working with. "),e._UZ(35,"br")(36,"br"),e._uU(37," In the following sections of this guideline, we will explain the basics of writing a SPARQL query. We will use a simple scenario of searching the DBpedia database for information about movies. "),e.qZA()(),e.TgZ(38,"div",4)(39,"h3",10),e._uU(40,"SELECT, WHERE and LIMIT"),e.qZA(),e.TgZ(41,"p"),e._uU(42," In SPARQL, the "),e.TgZ(43,"em",11),e._uU(44,"SELECT"),e.qZA(),e._uU(45," clause is where you define the specific pieces of data you want to pull from your dataset. Think of it as telling the query exactly what information you're looking for and inorder to actually find the data you're interested in, you'll use the "),e.TgZ(46,"em",11),e._uU(47,"WHERE"),e.qZA(),e._uU(48,' clause. This is where you set the conditions, or patterns, that your data needs to match. It\'s like giving your query a set of instructions: "Find me movies, but only those that match these specific criteria." The following code snippet shows a query to retrieve a list of movies and their titles from DBpedia database. '),e._UZ(49,"br"),e.qZA()(),e.TgZ(50,"div",7),e._UZ(51,"div",8),e.TgZ(52,"pre")(53,"code",9),e._uU(54,"\n        SELECT ?movie ?title "),e._UZ(55,"br"),e._uU(56,"\n        WHERE {\n         ?movie a <http://dbpedia.org/ontology/Film> ;\n        <http://xmlns.com/foaf/0.1/name> ?title . \n         }\n        LIMIT 10\n    "),e.qZA()()(),e.TgZ(57,"div",4)(58,"p"),e._uU(59," In the above example, we are using the keyword "),e.TgZ(60,"em",11),e._uU(61,"SELECT"),e.qZA(),e._uU(62," to specify which variables we want to retrieve the movie itself (?movie) and its title (?title). "),e._UZ(63,"br")(64,"br"),e._uU(65," The keyword "),e.TgZ(66,"em",11),e._uU(67,"WHERE"),e.qZA(),e._uU(68," is used to specify the conditions for matching data. Here, it specifies that: "),e.TgZ(69,"mat-list")(70,"mat-list-item")(71,"p"),e._uU(72," 1. `?movie` should be an instance of "),e.TgZ(73,"a",12),e._uU(74,"http://dbpedia.org/ontology/Film"),e.qZA(),e._uU(75,", which is a DBpedia ontology class that represents a movie. "),e.qZA()(),e.TgZ(76,"mat-list-item")(77,"p"),e._uU(78," 2. `?movie` should have a property called `foaf:name`, which holds the movie\u2019s title. "),e.qZA()()(),e.TgZ(79,"em",11),e._uU(80,"LIMIT"),e.qZA(),e._uU(81," keyword is used to truncate the list of returned data and keep only the first 10 results. This is very handy when you are dealing with a large dataset but you are only interested in a sample pool. By setting a limit, you can easily achieve this. "),e.qZA()(),e.TgZ(82,"div",4)(83,"p"),e._uU(84," We can also retrieve additional properties, as long as those properties are present in the ontology class, by binding more variables. Below is a code snippet to retrieve the runtime and release date, in addition to the name of each movie. "),e.qZA()(),e.TgZ(85,"div",7),e._UZ(86,"div",8),e.TgZ(87,"pre")(88,"code",9),e._uU(89,"\n        SELECT ?movie ?name ?runtime ?releaseDate "),e._UZ(90,"br"),e._uU(91,"\n        WHERE {\n          ?movie a <http://dbpedia.org/ontology/Film> ;\n                 <http://xmlns.com/foaf/0.1/name> ?name ;\n                 <http://dbpedia.org/ontology/runtime> ?runtime ;\n                 <http://dbpedia.org/ontology/releaseDate> ?releaseDate . \n        }\n        LIMIT 10\n    "),e.qZA()()(),e.TgZ(92,"div",4)(93,"h3",5),e._uU(94," Internationalized Resource Identifiers - IRIs "),e.qZA(),e.TgZ(95,"p"),e._uU(96," In SPARQL queries, URLs (Uniform Resource Locators) and IRIs (Internationalized Resource Identifiers) are important for identifying resources and properties. They serve as unique identifiers that allow you to precisely specify the data you want to query. Each URL or IRI points to a specific resource or property within a dataset - DBpedia, for example, has its own set of resources and properties. Using IRIs eliminates confusion about what you\u2019re querying and provides clear references that are understood universally. "),e._UZ(97,"br")(98,"br"),e._uU(99," For instance, in our previous query example: "),e.TgZ(100,"mat-list")(101,"mat-list-item")(102,"p"),e._uU(103," -> The URL "),e.TgZ(104,"a",13),e._uU(105," `http://dbpedia.org/ontology/Film` "),e.qZA(),e._uU(106," identifies the Film class within the DBpedia ontology, specifying that we are interested in resources categorized as movies. "),e.qZA()(),e.TgZ(107,"mat-list-item")(108,"p"),e._uU(109," -> The URL "),e.TgZ(110,"a",14),e._uU(111,"`http://xmlns.com/foaf/0.1/name`"),e.qZA(),e._uU(112," identifies the name property, which holds the title of each movie. "),e.qZA()()()(),e.TgZ(113,"div",4)(114,"p"),e._uU(115,' These URLs (or IRIs) are essential because they uniquely define what we mean by "Film" and "name" in the context of the DBpedia dataset. '),e.qZA()()(),e.TgZ(116,"div",7),e._UZ(117,"div",8),e.TgZ(118,"pre")(119,"code",9),e._uU(120,"\n        PREFIX dbo: <http://dbpedia.org/ontology/> "),e._UZ(121,"br"),e._uU(122," \n        PREFIX dbp: <http://dbpedia.org/property> "),e._UZ(123,"br"),e._uU(124,"\n        SELECT ?movie ?name ?releaseDate "),e._UZ(125,"br"),e._uU(126,"\n        WHERE { \n        ?movie a dbo:Film ; \n        dbp:name ?name ; \n        dbo:releaseDate\n        ?releaseDate .\n         } \n        LIMIT 10\n      "),e.qZA()()(),e.TgZ(127,"div",4)(128,"h3",10),e._uU(129,"Prefixes"),e.qZA(),e.TgZ(130,"p"),e._uU(131," As you start writing SPARQL queries, you\u2019ll notice that many of the resources and properties have long, complex IRIs. Constantly typing out these lengthy IRIs can be cumbersome. That\u2019s where prefixes come in. "),e._UZ(132,"br")(133,"br"),e._uU(134," Prefixes are shorthand notations that allow you to reference long IRIs with shorter, more readable terms. By defining a prefix at the beginning of your SPARQL query, you create an alias for a specific IRI. This approach helps in making your queries cleaner and easier to read. To create a prefix, you need to identify the resource IRI that you will use. Specific properties from that IRI are referenced using the alias you define, so you only need to provide the part of the resource path after the prefix. The syntax is the keyword PREFIX, followed by an alias name, a colon, and the resource URL. "),e.qZA()(),e.TgZ(135,"div",7)(136,"div",8)(137,"a")(138,"mat-icon"),e._uU(139,"content_copy"),e.qZA()()(),e.TgZ(140,"pre")(141,"code",9),e._uU(142,"\n          PREFIX dbo: <http://dbpedia.org/ontology/>\n        "),e.qZA()()(),e.TgZ(143,"div",4)(144,"p"),e._uU(145," Now let\u2019s take the previous example where we queried for the name, release date, and runtime of movies, and define prefixes to tidy up the query: "),e.qZA()(),e.TgZ(146,"div",7)(147,"div",8)(148,"a")(149,"mat-icon"),e._uU(150,"content_copy"),e.qZA()(),e.TgZ(151,"a")(152,"mat-icon"),e._uU(153,"open_in_new"),e.qZA()()(),e.TgZ(154,"pre")(155,"code",9),e._uU(156,"\n          PREFIX dbo: <http://dbpedia.org/ontology/> "),e._UZ(157,"br"),e._uU(158,"\n          PREFIX foaf: <http://xmlns.com/foaf/0.1/> "),e._UZ(159,"br"),e._uU(160,"\n          SELECT ?movie ?name ?runtime ?releaseDate "),e._UZ(161,"br"),e._uU(162,"\n          WHERE {\n            ?movie a dbo:Film ; "),e._UZ(163,"br"),e._uU(164,"\n                   foaf:name ?name ; "),e._UZ(165,"br"),e._uU(166,"\n                   dbo:runtime ?runtime ; "),e._UZ(167,"br"),e._uU(168,"\n                   dbo:releaseDate ?releaseDate . "),e._UZ(169,"br"),e._uU(170,"\n          }\n          LIMIT 10\n      "),e.qZA()()(),e.TgZ(171,"div",4)(172,"h3",5),e._uU(173,"Filters"),e.qZA(),e.TgZ(174,"p"),e._uU(175," In SPARQL queries, filters are used to refine and constrain the results based on specific conditions. They help in selecting only those data entries that meet certain criteria, narrowing down the dataset to only the most pertinent information. "),e._UZ(176,"br")(177,"br"),e._uU(178," Use filters when you need to enforce specific conditions on your data, such as retrieving only movies released after a certain year or only movies with a runtime longer than a specific duration. "),e._UZ(179,"br")(180,"br"),e._uU(181," Here\u2019s an example of how you might use a FILTER in a SPARQL query to retrieve only movies released after 2000 and with a runtime of less than an hour and a half: "),e.qZA()(),e.TgZ(182,"div",7),e._UZ(183,"div",8),e.TgZ(184,"pre")(185,"code",9),e._uU(186,"\n        PREFIX dbo: <http://dbpedia.org/ontology/> "),e._UZ(187,"br"),e._uU(188,"\n        PREFIX foaf: <http://xmlns.com/foaf/0.1/> "),e._UZ(189,"br")(190,"br"),e._uU(191,"\n        SELECT ?movie ?name ?releaseDate ?runtime "),e._UZ(192,"br"),e._uU(193,"\n        WHERE {\n          ?movie a dbo:Film ; "),e._UZ(194,"br"),e._uU(195,"\n                 foaf:name ?name ; "),e._UZ(196,"br"),e._uU(197,"\n                 dbo:releaseDate ?releaseDate ; "),e._UZ(198,"br"),e._uU(199,"\n                 dbo:runtime ?runtime . "),e._UZ(200,"br"),e._uU(201,'\n          FILTER (YEAR(?releaseDate) > 2000 \n                   && ?runtime < "PT1H30M"^^xsd:duration) '),e._UZ(202,"br"),e._uU(203,"\n        }\n        LIMIT 10\n    "),e.qZA()()(),e.TgZ(204,"div",4)(205,"p"),e._uU(206," The "),e.TgZ(207,"em",11),e._uU(208,"WHERE"),e.qZA(),e._uU(209," clause is used to define the pattern of triples that your query will match in the dataset. It specifies the conditions for the data relationships and structure. On the otherhand, The "),e.TgZ(210,"em",11),e._uU(211,"FILTER"),e.qZA(),e._uU(212," clause is applied after the WHERE clause to impose additional constraints on the results. It refines the results by evaluating expressions based on the variables returned by the WHERE clause. "),e.qZA()(),e.TgZ(213,"div",4)(214,"h3",5),e._uU(215,"Order By"),e.qZA(),e.TgZ(216,"p")(217,"em",15),e._uU(218,"ORDER BY"),e.qZA(),e._uU(219," is a straightforward keyword in SPARQL that helps to sort query results based on specified conditions. In our example, let's say we want to order the movies by their release date in descending order, so the most recent movies appear at the top. "),e._UZ(220,"br")(221,"br"),e._uU(222," Here's how you would modify the query to include the em.highlight-language-clauseORDER BY clause:"),e.qZA()(),e.TgZ(223,"div",7),e._UZ(224,"div",8),e.TgZ(225,"pre")(226,"code",9),e._uU(227,"\n        PREFIX dbo: <http://dbpedia.org/ontology/> "),e._UZ(228,"br"),e._uU(229,"\n        PREFIX foaf: <http://xmlns.com/foaf/0.1/> "),e._UZ(230,"br"),e._uU(231,"\n        SELECT ?movie ?name ?releaseDate "),e._UZ(232,"br"),e._uU(233,"\n        WHERE {\n          ?movie a dbo:Film ; "),e._UZ(234,"br"),e._uU(235,"\n                 foaf:name ?name ; "),e._UZ(236,"br"),e._uU(237,"\n                 dbo:releaseDate ?releaseDate . "),e._UZ(238,"br"),e._uU(239,"\n        }\n        ORDER BY DESC(?releaseDate) "),e._UZ(240,"br"),e._uU(241,"\n        LIMIT 10\n    "),e.qZA()()(),e.TgZ(242,"div",16)(243,"p"),e._uU(244," By understanding the basics of querying with SPARQL you now have the foundation needed to explore and interact with RDF data effectively. "),e._UZ(245,"br")(246,"br"),e._uU(247," SPARQL provides powerful tools to retrieve and manipulate data from diverse datasets, making it an invaluable skill for working with the Semantic Web. As you continue to practice and experiment with different queries, you\u2019ll discover even more advanced techniques and functionalities. "),e._UZ(248,"br")(249,"br"),e._uU(250," If you\u2019re eager to dive deeper, we\u2019ve compiled additional resources for further reading and exploration. Happy querying! "),e.qZA()(),e.TgZ(251,"div",17)(252,"h3",5),e._uU(253,"Additional Resources"),e.qZA(),e.TgZ(254,"p"),e._uU(255,"For further reading, below are some resources to get you started:"),e.qZA(),e.TgZ(256,"mat-list")(257,"mat-list-item"),e._uU(258,"-> DuCharme, B. (2013). Learning SPARQL: Querying and updating with SPARQL 1.1. O'Reilly Media. "),e.qZA(),e.TgZ(259,"mat-list-item"),e._uU(260,"-> W3C Recommendation 21 March 2013https://www.w3.org/TR/sparql11-query/ "),e.qZA()()()(),e.TgZ(261,"div",18),e._UZ(262,"hr"),e.TgZ(263,"p",19),e._uU(264,"Author: Meti Bayissa"),e.qZA(),e.TgZ(265,"p",20),e._uU(266,"August, 2024"),e.qZA()()())},dependencies:[l.i$,l.Tg,o.Hw],styles:[".documentation-content-container[_ngcontent-%COMP%]{margin:7% 10%}.documentation-content-container[_ngcontent-%COMP%]   .title[_ngcontent-%COMP%]{text-align:center;font-size:2.5rem;font-weight:700;color:#073144;text-transform:capitalize}.documentation-content-container[_ngcontent-%COMP%]   .sub-section-title[_ngcontent-%COMP%]{font-size:1.4rem;text-transform:capitalize;margin-bottom:1rem}.documentation-content-container[_ngcontent-%COMP%]   .documentation-content[_ngcontent-%COMP%]   .paragraph[_ngcontent-%COMP%]{text-align:justify;line-height:25px;font-size:1.1rem}.documentation-content-container[_ngcontent-%COMP%]   .documentation-content[_ngcontent-%COMP%]   .paragraph[_ngcontent-%COMP%]   .highlight-language-keyword[_ngcontent-%COMP%]{color:#e80b76;font-weight:500}.documentation-content-container[_ngcontent-%COMP%]   .documentation-content[_ngcontent-%COMP%]   .code-snippet-container[_ngcontent-%COMP%]{padding:0 1.5rem;margin:2% 5%}.documentation-content-container[_ngcontent-%COMP%]   .documentation-content[_ngcontent-%COMP%]   .code-snippet-header[_ngcontent-%COMP%]{background-color:#eecd62aa;display:flex;height:1.2rem;justify-content:flex-end;gap:15px;color:#0c0900;padding:.5rem}.documentation-content-container[_ngcontent-%COMP%]   .documentation-content[_ngcontent-%COMP%]   .language-sparql[_ngcontent-%COMP%]{margin:0!important;padding:0!important}.documentation-content-container[_ngcontent-%COMP%]   .documentation-content[_ngcontent-%COMP%]   .closing-remarks[_ngcontent-%COMP%]{margin-top:7%}.documentation-content-container[_ngcontent-%COMP%]   .footer[_ngcontent-%COMP%]{font-style:italic;color:gray;margin-top:9%;text-align:center}.documentation-content-container[_ngcontent-%COMP%]   mat-list-item[_ngcontent-%COMP%]   p[_ngcontent-%COMP%]{word-wrap:break-word;white-space:pre-wrap}@media (max-width: 768px){.documentation-content-container[_ngcontent-%COMP%]{margin:5% 8%}.documentation-content-container[_ngcontent-%COMP%]   .title[_ngcontent-%COMP%]{font-size:2rem}.documentation-content-container[_ngcontent-%COMP%]   .sub-section-title[_ngcontent-%COMP%]{font-size:1.3rem}.documentation-content-container[_ngcontent-%COMP%]   .documentation-content[_ngcontent-%COMP%]   .paragraph[_ngcontent-%COMP%]{font-size:1rem;line-height:22px}.documentation-content-container[_ngcontent-%COMP%]   .documentation-content[_ngcontent-%COMP%]   .code-snippet-container[_ngcontent-%COMP%]{margin:2%}.documentation-content-container[_ngcontent-%COMP%]   .documentation-content[_ngcontent-%COMP%]   .code-snippet-header[_ngcontent-%COMP%]{height:auto;padding:.3rem}.documentation-content-container[_ngcontent-%COMP%]   .footer[_ngcontent-%COMP%]{margin-top:7%}}@media (max-width: 480px){.documentation-content-container[_ngcontent-%COMP%]{margin:5%}.documentation-content-container[_ngcontent-%COMP%]   .title[_ngcontent-%COMP%]{font-size:1.8rem}.documentation-content-container[_ngcontent-%COMP%]   .sub-section-title[_ngcontent-%COMP%]{font-size:1.2rem}.documentation-content-container[_ngcontent-%COMP%]   .documentation-content[_ngcontent-%COMP%]   .paragraph[_ngcontent-%COMP%]{font-size:.95rem;line-height:20px}.documentation-content-container[_ngcontent-%COMP%]   .documentation-content[_ngcontent-%COMP%]   .code-snippet-container[_ngcontent-%COMP%]{margin:2% 1%;padding:0 1rem}.documentation-content-container[_ngcontent-%COMP%]   .documentation-content[_ngcontent-%COMP%]   .code-snippet-header[_ngcontent-%COMP%]{font-size:.9rem;padding:.2rem}.documentation-content-container[_ngcontent-%COMP%]   .footer[_ngcontent-%COMP%]{font-size:.9rem;margin-top:6%}}"]})}}return g})()},{path:"query-am-dbpedia",component:(()=>{class g{constructor(b,f){this.highLightService=b,this.renderer=f,this._styleElement=this.renderer.createElement("link"),this._scriptElement=this.renderer.createElement("script"),this._highlighted=!1}ngOnInit(){this._loadScript("../../../assets/scripts/prism.js"),this._styleElement.rel="stylesheet",this._styleElement.href="../../../assets/css/prism.css",this.renderer.appendChild(document.head,this._styleElement)}ngAfterViewInit(){this._highlighted||(this.highLightService.highlightAll(),this._highlighted=!0)}ngOnDestroy(){this._styleElement&&this.renderer.removeChild(document.head,this._styleElement)}_loadScript(b){this._scriptElement=this.renderer.createElement("script"),this._scriptElement.src=b,this._scriptElement.type="text/javascript",this._scriptElement.async=!0,this.renderer.appendChild(document.body,this._scriptElement)}static{this.\u0275fac=function(f){return new(f||g)(e.Y36(t),e.Y36(e.Qsj))}}static{this.\u0275cmp=e.Xpm({type:g,selectors:[["app-amahric-for-beginners-documentation"]],decls:131,vars:2,consts:[[1,"documentation-content-container"],[1,"title"],[1,"subtitle"],[1,"documentation-content"],[1,"paragraph"],[1,"sub-section-title"],[3,"routerLink"],[1,"code-snippet-container"],[1,"code-snippet-header"],[1,"language-sparql"],["href",""],[1,"footer"],[1,"author"],[1,"date"]],template:function(f,Z){1&f&&(e.TgZ(0,"div",0)(1,"h1",1),e._uU(2,"Querying Amharic DBpedia"),e.qZA(),e._UZ(3,"h2",2),e.TgZ(4,"div",3)(5,"div")(6,"div",4),e._UZ(7,"h3",5)(8,"p"),e.qZA(),e.TgZ(9,"div",4)(10,"h3",5),e._uU(11,"Intro"),e.qZA(),e.TgZ(12,"p"),e._uU(13," SPARQL is a language designed for querying knowledge bases. If you are already familiar with the SQL query language, SPARQL is quite similar but adapted to semantic web standards. If you're new to SPARQL, refer to this "),e.TgZ(14,"a",6),e._uU(15,"documentation"),e.qZA(),e._uU(16,". "),e._UZ(17,"br")(18,"br"),e._uU(19," In this guide, we outline how to query the Amharic DBpedia. For the purpose of this guideline, we will use an example focused on retrieving information about royalties. "),e.qZA()(),e.TgZ(20,"div",4)(21,"h3",5),e._uU(22,"Named graphs"),e.qZA(),e.TgZ(23,"p"),e._uU(24," A named graph is a powerful feature in RDF that allows you to group triples under a unique identifier, often referred to as a URI. This enables more organized and manageable data, particularly when working with large datasets. In this guide, we will be using the named graph "),e.qZA(),e.TgZ(25,"div",7),e._UZ(26,"div",8),e.TgZ(27,"pre")(28,"code",9),e._uU(29,"<http://am.dbpedia.org>"),e.qZA()()(),e._uU(30," ,. This graph will serve as the basis for our SPARQL queries. "),e._UZ(31,"br"),e.TgZ(32,"h3",5),e._uU(33,"Structure"),e.qZA(),e.TgZ(34,"p"),e._uU(35," Say you want to retrieve information about a specific royalty. You might be interested in details such as their title, reign period, and notable achievements. Additionally, it could be useful to see their successors or predecessors. Typically, this kind of information can be found in the infobox on the right side of the Wikipedia page. "),e._UZ(36,"br")(37,"br"),e._uU(38," In semantic web, this information is represented as triples: subject, predicate, and object. The subject is the royalty you're interested in, the predicate describes various properties of that royalty, and the object is the specific value or detail you're seeking. "),e._UZ(39,"br")(40,"br"),e._uU(41," To better understand this concept, visit the DBpedia mappings page. You can choose the mapping for your preferred language from the navigation menu on the left. Based on what we found on the DBpedia mapping page, we\u2019ve sketched out the following conceptual schema. "),e._UZ(42,"img"),e.qZA()(),e.TgZ(43,"div",4)(44,"h3",5),e._uU(45,"First Simple Query"),e.qZA(),e.TgZ(46,"p"),e._uU(47," Let\u2019s begin by navigating to the "),e.TgZ(48,"a",10),e._uU(49,"Amharic DBpedia endpoint"),e.qZA(),e._uU(50,' and running our first query. To get started, we\u2019ll query DBpedia to retrieve all objects belonging to the class "Royalty." '),e.qZA(),e.TgZ(51,"div",7),e._UZ(52,"div",8),e.TgZ(53,"pre")(54,"code",9),e._uU(55,"\n          PREFIX dbo: <//dbpedia.org/ontology/>\n          PREFIX rdf: <//www.w3.org/1999/02/22-rdf-syntax-ns#>\n          \n          SELECT ?s ?p ?o\n          WHERE {\n            ?s rdf:type dbo:Royalty .\n            ?s ?p ?o\n          }\n          LIMIT 10  \n        "),e.qZA()()(),e.TgZ(56,"p"),e._uU(57," This query retrieves all triples where the subject is of type `dbo:Royalty` and returns the first ten results, as specified by the `LIMIT` clause. The `LIMIT` clause is optional and is used here to restrict the number of results for easier examination. "),e.qZA()(),e.TgZ(58,"div",4)(59,"h3",5),e._uU(60,"Query with a Specific Condition"),e.qZA(),e.TgZ(61,"p"),e._uU(62,' We will use DBpedia to retrieve a list of royalties from Ethiopia who held a specific title during their reign. In this example, we are interested in royalties with the title "\u1295\u1309\u1220 \u1290\u1308\u1225\u1275 \u12d8\u12a2\u1275\u12ee\u1335\u12eb" (King of Ethiopia). '),e.qZA(),e.TgZ(63,"div",7),e._UZ(64,"div",8),e.TgZ(65,"pre")(66,"code",9),e._uU(67,'\n          PREFIX dbo: <//dbpedia.org/ontology/>\n          PREFIX rdf: <//www.w3.org/1999/02/22-rdf-syntax-ns#>\n          PREFIX rdfs: <//www.w3.org/2000/01/rdf-schema#>\n          \n          SELECT ?s ?p ?o\n          WHERE {\n            ?s dbo:title "\u1295\u1309\u1220 \u1290\u1308\u1225\u1275 \u12d8\u12a2\u1275\u12ee\u1335\u12eb"@am .\n            ?s ?p ?o\n          }\n          LIMIT 10\n        '),e.qZA()()(),e.TgZ(68,"p"),e._uU(69," Alternatively, we can query the number of royalties who held this title and have a reference in the Amharic Wikipedia. "),e.qZA(),e.TgZ(70,"div",7),e._UZ(71,"div",8),e.TgZ(72,"pre")(73,"code",9),e._uU(74,'\n          PREFIX dbo: <//dbpedia.org/ontology/>\n          PREFIX rdf: <//www.w3.org/1999/02/22-rdf-syntax-ns#>\n\n          SELECT (COUNT(DISTINCT ?s) AS ?royaltyCount)\n          WHERE {\n            ?s rdf:type dbo:Royalty .\n            ?s dbo:title "\u1295\u1309\u1220 \u1290\u1308\u1225\u1275 \u12d8\u12a2\u1275\u12ee\u1335\u12eb"@am .\n          }\n          LIMIT 1\n        '),e.qZA()()(),e.TgZ(75,"p"),e._uU(76," In this query, the `COUNT(DISTINCT ?s)` function is particularly useful because it counts the number of distinct royalties, rather than the total number of triples with that subject. This approach ensures an accurate count of unique royalties, avoiding inflated numbers that might arise from multiple triples associated with the same subject. "),e.qZA(),e.TgZ(77,"div",7),e._UZ(78,"div",8),e.TgZ(79,"pre")(80,"code",9),e._uU(81,'\n          PREFIX dbo: <//dbpedia.org/ontology/>\n          PREFIX rdf: <//www.w3.org/1999/02/22-rdf-syntax-ns#>\n          PREFIX rdfs: <//www.w3.org/2000/01/rdf-schema#>\n          \n          SELECT ?s ?p ?o\n          WHERE {\n            ?s dbo:title "\u1295\u1309\u1220 \u1290\u1308\u1225\u1275 \u12d8\u12a2\u1275\u12ee\u1335\u12eb"@am .\n            ?s ?p ?o\n          }\n          LIMIT 10\n        '),e.qZA()()()(),e.TgZ(82,"div",4)(83,"h3",5),e._uU(84,"Checking the Existence of a Fact"),e.qZA(),e.TgZ(85,"p"),e._uU(86," Another interesting aspect of SPARQL is that it can be used to answer yes-or-no questions about whether something holds true or not. For instance, we can ask DBpedia whether John Doe is or has been the King of Ethiopia. "),e.qZA(),e.TgZ(87,"div",7),e._UZ(88,"div",8),e.TgZ(89,"pre")(90,"code",9),e._uU(91,'\n          PREFIX dbo: <//dbpedia.org/ontology/>\n          PREFIX rdf: <//www.w3.org/1999/02/22-rdf-syntax-ns#>\n          PREFIX rdfs: <//www.w3.org/2000/01/rdf-schema#>\n        ASK {\n        ?johnDoe rdfs\n        "John Doe"@en.\n        ?johnDoe rdf\n        dbo\n        .\n        ?johnDoe dbo\n        "\u1295\u1309\u1220 \u1290\u1308\u1225\u1275 \u12d8\u12a2\u1275\u12ee\u1335\u12eb"@am .\n        }\n        LIMIT 1\n        '),e.qZA()()()(),e.TgZ(92,"div",4)(93,"h3",5),e._uU(94," Handling UNION Operations in SPARQL Queries "),e.qZA(),e.TgZ(95,"p"),e._uU(96," moving on to more complex queires, lets see how we can define a or operation on sparql queries. in this example we will retrive royalities who either father or mother is also a royalty. "),e.qZA(),e.TgZ(97,"div",7),e._UZ(98,"div",8),e.TgZ(99,"pre")(100,"code",9),e._uU(101,"\n          \n        "),e.qZA()()(),e.TgZ(102,"p"),e._uU(103," The query retrieves distinct subjects, predicates, objects, and titles (if available) related to royalties. It filters entities to include only those of type dbo:Royalty. The OPTIONAL clause is used to include the title of the royalty if it exists. Additionally, the query checks if the father of the royalty is also of type dbo:Royalty. It also checks if the mother of the royalty is of type dbo:Royalty. The UNION operator is employed to ensure that at least one of these conditions (either the father or the mother being a royalty) is satisfied. "),e.qZA(),e.TgZ(104,"div",7),e._UZ(105,"div",8),e.TgZ(106,"pre")(107,"code",9),e._uU(108,"\n          PREFIX dbo: <//dbpedia.org/ontology/>\n          PREFIX rdf: <//www.w3.org/1999/02/22-rdf-syntax-ns#>\n          PREFIX rdfs: <//www.w3.org/2000/01/rdf-schema#>\n\n          SELECT DISTINCT ?royalty ?p ?o ?title\n\n          WHERE {\n            # Check if the person is a royalty\n            ?royalty rdf:type dbo:Royalty .\n            OPTIONAL { ?royalty dbo:title ?title . }\n\n            # Here we check if the father is a royalty\n            {\n              ?royalty dbo:father ?parent .\n              ?parent rdf:type dbo:Royalty .\n            }\n            UNION\n            # Here we check if the mother is a royalty\n            {\n              ?royalty dbo:mother ?parent .\n              ?parent rdf:type dbo:Royalty .\n            }\n\n            ?royalty ?p ?o\n            }\n          LIMIT 10\n\n        "),e.qZA()()(),e.TgZ(109,"p"),e._uU(110," We can also do a fact checking to see if a royalty has a royalty for a mom or a dad "),e.qZA(),e.TgZ(111,"div",7),e._UZ(112,"div",8),e.TgZ(113,"pre")(114,"code",9),e._uU(115,'\n          PREFIX dbo: <//dbpedia.org/ontology/>\nPREFIX rdf: <//www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <//www.w3.org/2000/01/rdf-schema#>\n\nASK {\n  ?person rdfs:label "\u12ed\u130d\u1263 \u133d\u12ee\u1295"@am .\n  \n  # Check if his father is a royalty\n  {\n    ?person dbo:father ?parent .\n    ?parent rdf:type dbo:Royalty .\n  }\n  UNION\n  # Check if his mother is a royalty\n  {\n    ?person dbo:mother ?parent .\n    ?parent rdf:type dbo:Royalty .\n  }\n  }\n\n        '),e.qZA()()(),e.TgZ(116,"p"),e._uU(117," We can also perform a fact-check to determine if a royalty has a parent who is also a royalty. This involves checking whether either the mother or father of the royalty is of type `dbo:Royalty`. "),e.qZA(),e.TgZ(118,"div",7),e._UZ(119,"div",8),e.TgZ(120,"pre")(121,"code",9),e._uU(122,'\n  PREFIX dbo: <//dbpedia.org/ontology/>\n  PREFIX rdf: <//www.w3.org/1999/02/22-rdf-syntax-ns#>\n  PREFIX rdfs: <//www.w3.org/2000/01/rdf-schema#>\n\n  ASK {\n    ?person rdfs:label "\u12ed\u130d\u1263 \u133d\u12ee\u1295"@am .\n  \n    # Check if his father is a royalty\n    {\n      ?person dbo:father ?parent .\n      ?parent rdf:type dbo:Royalty .\n    }\n    UNION\n    # Check if his mother is a royalty\n    {\n      ?person dbo:mother ?parent .\n      ?parent rdf:type dbo:Royalty .\n    }\n    }\n'),e.qZA()()(),e.TgZ(123,"p"),e._uU(124,' This query checks whether the individual "\u12ed\u130d\u1263 \u133d\u12ee\u1295" has either a father or a mother who is a royalty. The `ASK` query will return true if at least one of the conditions is met\u2014i.e., if either the mother or father of the individual is of type `dbo:Royalty`. '),e.qZA()()()(),e.TgZ(125,"div",11),e._UZ(126,"hr"),e.TgZ(127,"p",12),e._uU(128,"Author: Meti Bayissa"),e.qZA(),e.TgZ(129,"p",13),e._uU(130,"August, 2024"),e.qZA()()()),2&f&&(e.xp6(14),e.Q6J("routerLink",e.DdM(1,s)))},dependencies:[y.rH],styles:[".documentation-content-container[_ngcontent-%COMP%]{margin:7% 10%}.documentation-content-container[_ngcontent-%COMP%]   .title[_ngcontent-%COMP%]{text-align:center;font-size:2.5rem;font-weight:700;color:#073144;text-transform:capitalize}.documentation-content-container[_ngcontent-%COMP%]   .sub-section-title[_ngcontent-%COMP%]{font-size:1.4rem;text-transform:capitalize;margin-bottom:1rem}.documentation-content-container[_ngcontent-%COMP%]   .documentation-content[_ngcontent-%COMP%]   .paragraph[_ngcontent-%COMP%]{text-align:justify;line-height:25px;font-size:1.1rem}.documentation-content-container[_ngcontent-%COMP%]   .documentation-content[_ngcontent-%COMP%]   .paragraph[_ngcontent-%COMP%]   .highlight-language-keyword[_ngcontent-%COMP%]{color:#e80b76;font-weight:500}.documentation-content-container[_ngcontent-%COMP%]   .documentation-content[_ngcontent-%COMP%]   .code-snippet-container[_ngcontent-%COMP%]{padding:0 1.5rem;margin:2% 5%}.documentation-content-container[_ngcontent-%COMP%]   .documentation-content[_ngcontent-%COMP%]   .code-snippet-header[_ngcontent-%COMP%]{background-color:#eecd62aa;display:flex;height:1.2rem;justify-content:flex-end;gap:15px;color:#0c0900;padding:.5rem}.documentation-content-container[_ngcontent-%COMP%]   .documentation-content[_ngcontent-%COMP%]   .language-sparql[_ngcontent-%COMP%]{margin:0!important;padding:0!important}.documentation-content-container[_ngcontent-%COMP%]   .documentation-content[_ngcontent-%COMP%]   .closing-remarks[_ngcontent-%COMP%]{margin-top:7%}.documentation-content-container[_ngcontent-%COMP%]   .footer[_ngcontent-%COMP%]{font-style:italic;color:gray;margin-top:9%;text-align:center}.documentation-content-container[_ngcontent-%COMP%]   mat-list-item[_ngcontent-%COMP%]   p[_ngcontent-%COMP%]{word-wrap:break-word;white-space:pre-wrap}@media (max-width: 768px){.documentation-content-container[_ngcontent-%COMP%]{margin:5% 8%}.documentation-content-container[_ngcontent-%COMP%]   .title[_ngcontent-%COMP%]{font-size:2rem}.documentation-content-container[_ngcontent-%COMP%]   .sub-section-title[_ngcontent-%COMP%]{font-size:1.3rem}.documentation-content-container[_ngcontent-%COMP%]   .documentation-content[_ngcontent-%COMP%]   .paragraph[_ngcontent-%COMP%]{font-size:1rem;line-height:22px}.documentation-content-container[_ngcontent-%COMP%]   .documentation-content[_ngcontent-%COMP%]   .code-snippet-container[_ngcontent-%COMP%]{margin:2%}.documentation-content-container[_ngcontent-%COMP%]   .documentation-content[_ngcontent-%COMP%]   .code-snippet-header[_ngcontent-%COMP%]{height:auto;padding:.3rem}.documentation-content-container[_ngcontent-%COMP%]   .footer[_ngcontent-%COMP%]{margin-top:7%}}@media (max-width: 480px){.documentation-content-container[_ngcontent-%COMP%]{margin:5%}.documentation-content-container[_ngcontent-%COMP%]   .title[_ngcontent-%COMP%]{font-size:1.8rem}.documentation-content-container[_ngcontent-%COMP%]   .sub-section-title[_ngcontent-%COMP%]{font-size:1.2rem}.documentation-content-container[_ngcontent-%COMP%]   .documentation-content[_ngcontent-%COMP%]   .paragraph[_ngcontent-%COMP%]{font-size:.95rem;line-height:20px}.documentation-content-container[_ngcontent-%COMP%]   .documentation-content[_ngcontent-%COMP%]   .code-snippet-container[_ngcontent-%COMP%]{margin:2% 1%;padding:0 1rem}.documentation-content-container[_ngcontent-%COMP%]   .documentation-content[_ngcontent-%COMP%]   .code-snippet-header[_ngcontent-%COMP%]{font-size:.9rem;padding:.2rem}.documentation-content-container[_ngcontent-%COMP%]   .footer[_ngcontent-%COMP%]{font-size:.9rem;margin-top:6%}}"]})}}return g})()},{path:"running-dief-extractor",component:(()=>{class g{constructor(b,f){this.highLightService=b,this.renderer=f,this._styleElement=this.renderer.createElement("link"),this._scriptElement=this.renderer.createElement("script"),this._highlighted=!1}ngOnInit(){this._loadScript("../../../assets/scripts/prism.js"),this._styleElement.rel="stylesheet",this._styleElement.href="../../../assets/css/prism.css",this.renderer.appendChild(document.head,this._styleElement)}ngAfterViewInit(){this._highlighted||(this.highLightService.highlightAll(),this._highlighted=!0)}ngOnDestroy(){this._styleElement&&this.renderer.removeChild(document.head,this._styleElement)}_loadScript(b){this._scriptElement=this.renderer.createElement("script"),this._scriptElement.src=b,this._scriptElement.type="text/javascript",this._scriptElement.async=!0,this.renderer.appendChild(document.body,this._scriptElement)}static{this.\u0275fac=function(f){return new(f||g)(e.Y36(t),e.Y36(e.Qsj))}}static{this.\u0275cmp=e.Xpm({type:g,selectors:[["app-running-dief-extractor-documentation"]],decls:279,vars:0,consts:[[1,"documentation-content-container"],[1,"title"],[1,"subtitle"],[1,"documentation-content"],[1,"paragraph"],[1,"sub-section-title"],["src","../../../assets/img/The-Process-of-DBpedia-Extraction-Framework.png","alt","The process of DBpedia Extraction Framework"],["href","https://github.com/dbpedia/extraction-framework","target","_blank","rel","noopener noreferrer"],["src","../../../assets/img/Overview-of-DBpedia-extraction-framework.png","alt","Over view of the DBpedia extraction framework"],[1,"sub-sub-section-title"],[1,"code-snippet-container"],[1,"code-snippet-header"],[1,"language-sparql"],[1,"subsection-title"],[1,"highlight-language-keyword"],["href","https://dbpedia.org/ontology/Film","target","_blank","rel","noopener noreferrer"],["href","http://dbpedia.org/ontology/Film","target","_blank","rel","noopener noreferrer"],["href","http://xmlns.com/foaf/0.1/name","target","_blank","rel","noopener noreferrer"],[1,"highlight-language-clause"],[1,"paragraph","closing-remarks"],[1,"resources"],[1,"footer"],[1,"author"],[1,"date"]],template:function(f,Z){1&f&&(e.TgZ(0,"div",0)(1,"h1",1),e._uU(2,"Running the dief framework"),e.qZA(),e._UZ(3,"h2",2),e.TgZ(4,"div",3)(5,"div",4)(6,"h3",5),e._uU(7,"Getting Started"),e.qZA(),e.TgZ(8,"p"),e._uU(9," The DBpedia Extraction Framework is an open-source tool used to extract structured information from Wikipedia. It converts the unstructured content of Wikipedia into RDF data, making it accessible for semantic web applications. This framework plays a crucial role in generating and maintaining the DBpedia knowledge base, which is widely used for research and data integration. The image below summrizes the the overall extraction framework. "),e._UZ(10,"img",6),e._uU(11," If you are interested in learning how the DIEF in works in depth you can view the documentation here you can also view or download the framework "),e.TgZ(12,"a",7),e._uU(13,"here"),e.qZA(),e._uU(14,". In this guide we will focus on running and extending the framework for Amharic. "),e.qZA()(),e.TgZ(15,"div",4)(16,"h2",2),e._uU(17,"Running the framework"),e.qZA(),e.TgZ(18,"h3",5),e._uU(19,"Extraction process"),e.qZA(),e.TgZ(20,"p"),e._uU(21," Running the extraction framework is a relatively complex task which is in details documented in the advanced QuickStart guide. To run the extraction process same as the DBpedia core team does, you can do using the MARVIN release bot. The MARVIN bot automates the overall extraction process, from downloading the ontology, mappings and Wikipedia dumps, to extraction and post-processing the data. Extraction generally could be of two types Generic and mapping based. Generic extracors use herustics to extract data while mapping based extractors uses manually curated mappings. you can view these mappings here. The extraction process generally involves parsing data and extracting information from wikipedia pages to make them available for query. "),e.qZA(),e._UZ(22,"img",8),e.TgZ(23,"p"),e._uU(24,"In this guide we will focus on running the extraction framework specifically for Amharic."),e.qZA()(),e.TgZ(25,"div",4)(26,"h4",9),e._uU(27,"Getting Sources files"),e.qZA(),e._UZ(28,"p"),e.qZA(),e.TgZ(29,"div",10),e._UZ(30,"div",11),e.TgZ(31,"pre")(32,"code",12),e._uU(33,"\n          SELECT ?s ?p ?o "),e._UZ(34,"br"),e._uU(35,"\n          WHERE { "),e._UZ(36,"br"),e._uU(37,"\n          ?s ?p ?o . "),e._UZ(38,"br"),e._uU(39,"\n          }\n        "),e.qZA(),e._uU(40,"\n        "),e.qZA()(),e.TgZ(41,"div",4)(42,"p"),e._uU(43," In this query, ?s, ?p, and ?o represent the subject, predicate, and object of every triple in the dataset. When this query runs, it returns a list of all the triples, essentially giving you a snapshot of the entire dataset. It\u2019s a powerful way to start exploring your data and understanding the structure of the information you're working with. "),e._UZ(44,"br")(45,"br"),e._uU(46," In the following sections of this guideline, we will explain the basics of writing a SPARQL query. We will use a simple scenario of searching the DBpedia database for information about movies. "),e.qZA()(),e.TgZ(47,"div",4)(48,"h3",13),e._uU(49,"SELECT, WHERE and LIMIT"),e.qZA(),e.TgZ(50,"p"),e._uU(51," In SPARQL, the "),e.TgZ(52,"em",14),e._uU(53,"SELECT"),e.qZA(),e._uU(54," clause is where you define the specific pieces of data you want to pull from your dataset. Think of it as telling the query exactly what information you're looking for and inorder to actually find the data you're interested in, you'll use the "),e.TgZ(55,"em",14),e._uU(56,"WHERE"),e.qZA(),e._uU(57,' clause. This is where you set the conditions, or patterns, that your data needs to match. It\'s like giving your query a set of instructions: "Find me movies, but only those that match these specific criteria." The following code snippet shows a query to retrieve a list of movies and their titles from DBpedia database. '),e._UZ(58,"br"),e.qZA()(),e.TgZ(59,"div",10),e._UZ(60,"div",11),e.TgZ(61,"pre")(62,"code",12),e._uU(63,"\n          SELECT ?movie ?title "),e._UZ(64,"br"),e._uU(65,"\n          WHERE {\n           ?movie a <http://dbpedia.org/ontology/Film> ;\n          <http://xmlns.com/foaf/0.1/name> ?title . \n           }\n          LIMIT 10\n      "),e.qZA()()(),e.TgZ(66,"div",4)(67,"p"),e._uU(68," In the above example, we are using the keyword "),e.TgZ(69,"em",14),e._uU(70,"SELECT"),e.qZA(),e._uU(71," to specify which variables we want to retrieve the movie itself (?movie) and its title (?title). "),e._UZ(72,"br")(73,"br"),e._uU(74," The keyword "),e.TgZ(75,"em",14),e._uU(76,"WHERE"),e.qZA(),e._uU(77," is used to specify the conditions for matching data. Here, it specifies that: "),e.TgZ(78,"mat-list")(79,"mat-list-item")(80,"p"),e._uU(81," 1. `?movie` should be an instance of "),e.TgZ(82,"a",15),e._uU(83,"http://dbpedia.org/ontology/Film"),e.qZA(),e._uU(84,", which is a DBpedia ontology class that represents a movie. "),e.qZA()(),e.TgZ(85,"mat-list-item")(86,"p"),e._uU(87," 2. `?movie` should have a property called `foaf:name`, which holds the movie\u2019s title. "),e.qZA()()(),e.TgZ(88,"em",14),e._uU(89,"LIMIT"),e.qZA(),e._uU(90," keyword is used to truncate the list of returned data and keep only the first 10 results. This is very handy when you are dealing with a large dataset but you are only interested in a sample pool. By setting a limit, you can easily achieve this. "),e.qZA()(),e.TgZ(91,"div",4)(92,"p"),e._uU(93," We can also retrieve additional properties, as long as those properties are present in the ontology class, by binding more variables. Below is a code snippet to retrieve the runtime and release date, in addition to the name of each movie. "),e.qZA()(),e.TgZ(94,"div",10),e._UZ(95,"div",11),e.TgZ(96,"pre")(97,"code",12),e._uU(98,"\n          SELECT ?movie ?name ?runtime ?releaseDate "),e._UZ(99,"br"),e._uU(100,"\n          WHERE {\n            ?movie a <http://dbpedia.org/ontology/Film> ;\n                   <http://xmlns.com/foaf/0.1/name> ?name ;\n                   <http://dbpedia.org/ontology/runtime> ?runtime ;\n                   <http://dbpedia.org/ontology/releaseDate> ?releaseDate . \n          }\n          LIMIT 10\n      "),e.qZA()()(),e.TgZ(101,"div",4)(102,"h3",5),e._uU(103," Internationalized Resource Identifiers - IRIs "),e.qZA(),e.TgZ(104,"p"),e._uU(105," In SPARQL queries, URLs (Uniform Resource Locators) and IRIs (Internationalized Resource Identifiers) are important for identifying resources and properties. They serve as unique identifiers that allow you to precisely specify the data you want to query. Each URL or IRI points to a specific resource or property within a dataset - DBpedia, for example, has its own set of resources and properties. Using IRIs eliminates confusion about what you\u2019re querying and provides clear references that are understood universally. "),e._UZ(106,"br")(107,"br"),e._uU(108," For instance, in our previous query example: "),e.TgZ(109,"mat-list")(110,"mat-list-item")(111,"p"),e._uU(112," -> The URL "),e.TgZ(113,"a",16),e._uU(114," `http://dbpedia.org/ontology/Film` "),e.qZA(),e._uU(115," identifies the Film class within the DBpedia ontology, specifying that we are interested in resources categorized as movies. "),e.qZA()(),e.TgZ(116,"mat-list-item")(117,"p"),e._uU(118," -> The URL "),e.TgZ(119,"a",17),e._uU(120,"`http://xmlns.com/foaf/0.1/name`"),e.qZA(),e._uU(121," identifies the name property, which holds the title of each movie. "),e.qZA()()()(),e.TgZ(122,"div",4)(123,"p"),e._uU(124,' These URLs (or IRIs) are essential because they uniquely define what we mean by "Film" and "name" in the context of the DBpedia dataset. '),e.qZA()()(),e.TgZ(125,"div",10),e._UZ(126,"div",11),e.TgZ(127,"pre")(128,"code",12),e._uU(129,"\n          PREFIX dbo: <http://dbpedia.org/ontology/> "),e._UZ(130,"br"),e._uU(131," \n          PREFIX dbp: <http://dbpedia.org/property> "),e._UZ(132,"br"),e._uU(133,"\n          SELECT ?movie ?name ?releaseDate "),e._UZ(134,"br"),e._uU(135,"\n          WHERE { \n          ?movie a dbo:Film ; \n          dbp:name ?name ; \n          dbo:releaseDate\n          ?releaseDate .\n           } \n          LIMIT 10\n        "),e.qZA()()(),e.TgZ(136,"div",4)(137,"h3",13),e._uU(138,"Prefixes"),e.qZA(),e.TgZ(139,"p"),e._uU(140," As you start writing SPARQL queries, you\u2019ll notice that many of the resources and properties have long, complex IRIs. Constantly typing out these lengthy IRIs can be cumbersome. That\u2019s where prefixes come in. "),e._UZ(141,"br")(142,"br"),e._uU(143," Prefixes are shorthand notations that allow you to reference long IRIs with shorter, more readable terms. By defining a prefix at the beginning of your SPARQL query, you create an alias for a specific IRI. This approach helps in making your queries cleaner and easier to read. To create a prefix, you need to identify the resource IRI that you will use. Specific properties from that IRI are referenced using the alias you define, so you only need to provide the part of the resource path after the prefix. The syntax is the keyword PREFIX, followed by an alias name, a colon, and the resource URL. "),e.qZA()(),e.TgZ(144,"div",10)(145,"div",11)(146,"a")(147,"mat-icon"),e._uU(148,"content_copy"),e.qZA()()(),e.TgZ(149,"pre")(150,"code",12),e._uU(151,"\n            PREFIX dbo: <http://dbpedia.org/ontology/>\n          "),e.qZA()()(),e.TgZ(152,"div",4)(153,"p"),e._uU(154," Now let\u2019s take the previous example where we queried for the name, release date, and runtime of movies, and define prefixes to tidy up the query: "),e.qZA()(),e.TgZ(155,"div",10)(156,"div",11)(157,"a")(158,"mat-icon"),e._uU(159,"content_copy"),e.qZA()(),e.TgZ(160,"a")(161,"mat-icon"),e._uU(162,"open_in_new"),e.qZA()()(),e.TgZ(163,"pre")(164,"code",12),e._uU(165,"\n            PREFIX dbo: <http://dbpedia.org/ontology/> "),e._UZ(166,"br"),e._uU(167,"\n            PREFIX foaf: <http://xmlns.com/foaf/0.1/> "),e._UZ(168,"br"),e._uU(169,"\n            SELECT ?movie ?name ?runtime ?releaseDate "),e._UZ(170,"br"),e._uU(171,"\n            WHERE {\n              ?movie a dbo:Film ; "),e._UZ(172,"br"),e._uU(173,"\n                     foaf:name ?name ; "),e._UZ(174,"br"),e._uU(175,"\n                     dbo:runtime ?runtime ; "),e._UZ(176,"br"),e._uU(177,"\n                     dbo:releaseDate ?releaseDate . "),e._UZ(178,"br"),e._uU(179,"\n            }\n            LIMIT 10\n        "),e.qZA()()(),e.TgZ(180,"div",4)(181,"h3",5),e._uU(182,"Filters"),e.qZA(),e.TgZ(183,"p"),e._uU(184," In SPARQL queries, filters are used to refine and constrain the results based on specific conditions. They help in selecting only those data entries that meet certain criteria, narrowing down the dataset to only the most pertinent information. "),e._UZ(185,"br")(186,"br"),e._uU(187," Use filters when you need to enforce specific conditions on your data, such as retrieving only movies released after a certain year or only movies with a runtime longer than a specific duration. "),e._UZ(188,"br")(189,"br"),e._uU(190," Here\u2019s an example of how you might use a FILTER in a SPARQL query to retrieve only movies released after 2000 and with a runtime of less than an hour and a half: "),e.qZA()(),e.TgZ(191,"div",10),e._UZ(192,"div",11),e.TgZ(193,"pre")(194,"code",12),e._uU(195,"\n          PREFIX dbo: <http://dbpedia.org/ontology/> "),e._UZ(196,"br"),e._uU(197,"\n          PREFIX foaf: <http://xmlns.com/foaf/0.1/> "),e._UZ(198,"br")(199,"br"),e._uU(200,"\n          SELECT ?movie ?name ?releaseDate ?runtime "),e._UZ(201,"br"),e._uU(202,"\n          WHERE {\n            ?movie a dbo:Film ; "),e._UZ(203,"br"),e._uU(204,"\n                   foaf:name ?name ; "),e._UZ(205,"br"),e._uU(206,"\n                   dbo:releaseDate ?releaseDate ; "),e._UZ(207,"br"),e._uU(208,"\n                   dbo:runtime ?runtime . "),e._UZ(209,"br"),e._uU(210,'\n            FILTER (YEAR(?releaseDate) > 2000 \n                     && ?runtime < "PT1H30M"^^xsd:duration) '),e._UZ(211,"br"),e._uU(212,"\n          }\n          LIMIT 10\n      "),e.qZA()()(),e.TgZ(213,"div",4)(214,"p"),e._uU(215," The "),e.TgZ(216,"em",14),e._uU(217,"WHERE"),e.qZA(),e._uU(218," clause is used to define the pattern of triples that your query will match in the dataset. It specifies the conditions for the data relationships and structure. On the otherhand, The "),e.TgZ(219,"em",14),e._uU(220,"FILTER"),e.qZA(),e._uU(221," clause is applied after the WHERE clause to impose additional constraints on the results. It refines the results by evaluating expressions based on the variables returned by the WHERE clause. "),e.qZA()(),e.TgZ(222,"div",4)(223,"h3",5),e._uU(224,"Order By"),e.qZA(),e.TgZ(225,"p")(226,"em",18),e._uU(227,"ORDER BY"),e.qZA(),e._uU(228," is a straightforward keyword in SPARQL that helps to sort query results based on specified conditions. In our example, let's say we want to order the movies by their release date in descending order, so the most recent movies appear at the top. "),e._UZ(229,"br")(230,"br"),e._uU(231," Here's how you would modify the query to include the em.highlight-language-clauseORDER BY clause:"),e.qZA()(),e.TgZ(232,"div",10),e._UZ(233,"div",11),e.TgZ(234,"pre")(235,"code",12),e._uU(236,"\n          PREFIX dbo: <http://dbpedia.org/ontology/> "),e._UZ(237,"br"),e._uU(238,"\n          PREFIX foaf: <http://xmlns.com/foaf/0.1/> "),e._UZ(239,"br"),e._uU(240,"\n          SELECT ?movie ?name ?releaseDate "),e._UZ(241,"br"),e._uU(242,"\n          WHERE {\n            ?movie a dbo:Film ; "),e._UZ(243,"br"),e._uU(244,"\n                   foaf:name ?name ; "),e._UZ(245,"br"),e._uU(246,"\n                   dbo:releaseDate ?releaseDate . "),e._UZ(247,"br"),e._uU(248,"\n          }\n          ORDER BY DESC(?releaseDate) "),e._UZ(249,"br"),e._uU(250,"\n          LIMIT 10\n      "),e.qZA()()(),e.TgZ(251,"div",19)(252,"p"),e._uU(253," By understanding the basics of querying with SPARQL you now have the foundation needed to explore and interact with RDF data effectively. "),e._UZ(254,"br")(255,"br"),e._uU(256," SPARQL provides powerful tools to retrieve and manipulate data from diverse datasets, making it an invaluable skill for working with the Semantic Web. As you continue to practice and experiment with different queries, you\u2019ll discover even more advanced techniques and functionalities. "),e._UZ(257,"br")(258,"br"),e._uU(259," If you\u2019re eager to dive deeper, we\u2019ve compiled additional resources for further reading and exploration. Happy querying! "),e.qZA()(),e.TgZ(260,"div",20)(261,"h3",5),e._uU(262,"Additional Resources"),e.qZA(),e.TgZ(263,"p"),e._uU(264,"For further reading, below are some resources to get you started:"),e.qZA(),e.TgZ(265,"mat-list")(266,"mat-list-item"),e._uU(267,"-> DuCharme, B. (2013). Learning SPARQL: Querying and updating with SPARQL 1.1. O'Reilly Media. "),e.qZA(),e._UZ(268,"mat-list-item"),e.TgZ(269,"mat-list-item"),e._uU(270,"W3C Recommendation 21 March 2013https://www.w3.org/TR/sparql11-query/ "),e.qZA()()()(),e.TgZ(271,"div",21),e._UZ(272,"hr"),e.TgZ(273,"p"),e._uU(274,"Images courtesy of: John Doe on Unsplash, Jane Smith on Pixabay"),e.qZA(),e.TgZ(275,"p",22),e._uU(276,"Author: Meti Bayissa"),e.qZA(),e.TgZ(277,"p",23),e._uU(278,"August, 2024"),e.qZA()()())},dependencies:[l.i$,l.Tg,o.Hw],styles:[".documentation-content-container[_ngcontent-%COMP%]{margin:7% 10%}.documentation-content-container[_ngcontent-%COMP%]   .title[_ngcontent-%COMP%]{text-align:center;font-size:2.5rem;font-weight:700;color:#073144;text-transform:capitalize}.documentation-content-container[_ngcontent-%COMP%]   .sub-section-title[_ngcontent-%COMP%]{font-size:1.4rem;text-transform:capitalize;margin-bottom:1rem}.documentation-content-container[_ngcontent-%COMP%]   .documentation-content[_ngcontent-%COMP%]   .paragraph[_ngcontent-%COMP%]{text-align:justify;line-height:25px;font-size:1.1rem}.documentation-content-container[_ngcontent-%COMP%]   .documentation-content[_ngcontent-%COMP%]   .paragraph[_ngcontent-%COMP%]   .highlight-language-keyword[_ngcontent-%COMP%]{color:#e80b76;font-weight:500}.documentation-content-container[_ngcontent-%COMP%]   .documentation-content[_ngcontent-%COMP%]   .code-snippet-container[_ngcontent-%COMP%]{padding:0 1.5rem;margin:2% 5%}.documentation-content-container[_ngcontent-%COMP%]   .documentation-content[_ngcontent-%COMP%]   .code-snippet-header[_ngcontent-%COMP%]{background-color:#eecd62aa;display:flex;height:1.2rem;justify-content:flex-end;gap:15px;color:#0c0900;padding:.5rem}.documentation-content-container[_ngcontent-%COMP%]   .documentation-content[_ngcontent-%COMP%]   .language-sparql[_ngcontent-%COMP%]{margin:0!important;padding:0!important}.documentation-content-container[_ngcontent-%COMP%]   .documentation-content[_ngcontent-%COMP%]   .closing-remarks[_ngcontent-%COMP%]{margin-top:7%}.documentation-content-container[_ngcontent-%COMP%]   .footer[_ngcontent-%COMP%]{font-style:italic;color:gray;margin-top:9%;text-align:center}.documentation-content-container[_ngcontent-%COMP%]   mat-list-item[_ngcontent-%COMP%]   p[_ngcontent-%COMP%]{word-wrap:break-word;white-space:pre-wrap}@media (max-width: 768px){.documentation-content-container[_ngcontent-%COMP%]{margin:5% 8%}.documentation-content-container[_ngcontent-%COMP%]   .title[_ngcontent-%COMP%]{font-size:2rem}.documentation-content-container[_ngcontent-%COMP%]   .sub-section-title[_ngcontent-%COMP%]{font-size:1.3rem}.documentation-content-container[_ngcontent-%COMP%]   .documentation-content[_ngcontent-%COMP%]   .paragraph[_ngcontent-%COMP%]{font-size:1rem;line-height:22px}.documentation-content-container[_ngcontent-%COMP%]   .documentation-content[_ngcontent-%COMP%]   .code-snippet-container[_ngcontent-%COMP%]{margin:2%}.documentation-content-container[_ngcontent-%COMP%]   .documentation-content[_ngcontent-%COMP%]   .code-snippet-header[_ngcontent-%COMP%]{height:auto;padding:.3rem}.documentation-content-container[_ngcontent-%COMP%]   .footer[_ngcontent-%COMP%]{margin-top:7%}}@media (max-width: 480px){.documentation-content-container[_ngcontent-%COMP%]{margin:5%}.documentation-content-container[_ngcontent-%COMP%]   .title[_ngcontent-%COMP%]{font-size:1.8rem}.documentation-content-container[_ngcontent-%COMP%]   .sub-section-title[_ngcontent-%COMP%]{font-size:1.2rem}.documentation-content-container[_ngcontent-%COMP%]   .documentation-content[_ngcontent-%COMP%]   .paragraph[_ngcontent-%COMP%]{font-size:.95rem;line-height:20px}.documentation-content-container[_ngcontent-%COMP%]   .documentation-content[_ngcontent-%COMP%]   .code-snippet-container[_ngcontent-%COMP%]{margin:2% 1%;padding:0 1rem}.documentation-content-container[_ngcontent-%COMP%]   .documentation-content[_ngcontent-%COMP%]   .code-snippet-header[_ngcontent-%COMP%]{font-size:.9rem;padding:.2rem}.documentation-content-container[_ngcontent-%COMP%]   .footer[_ngcontent-%COMP%]{font-size:.9rem;margin-top:6%}}"]})}}return g})()}]}];let v=(()=>{class g{static{this.\u0275fac=function(f){return new(f||g)}}static{this.\u0275mod=e.oAB({type:g})}static{this.\u0275inj=e.cJS({imports:[h.ez,y.Bz.forChild(u),y.Bz]})}}return g})();var T=i(2552),M=i(3185);let L=(()=>{class g{static{this.\u0275fac=function(f){return new(f||g)}}static{this.\u0275mod=e.oAB({type:g})}static{this.\u0275inj=e.cJS({providers:[t],imports:[h.ez,T.m,a.SJ,v,l.ie,o.Ps,M.vQ]})}}return g})()},1504:()=>{!function(F){var E=/(?:"(?:\\(?:\r\n|[\s\S])|[^"\\\r\n])*"|'(?:\\(?:\r\n|[\s\S])|[^'\\\r\n])*')/;F.languages.css={comment:/\/\*[\s\S]*?\*\//,atrule:{pattern:RegExp("@[\\w-](?:"+/[^;{\s"']|\s+(?!\s)/.source+"|"+E.source+")*?"+/(?:;|(?=\s*\{))/.source),inside:{rule:/^@[\w-]+/,"selector-function-argument":{pattern:/(\bselector\s*\(\s*(?![\s)]))(?:[^()\s]|\s+(?![\s)])|\((?:[^()]|\([^()]*\))*\))+(?=\s*\))/,lookbehind:!0,alias:"selector"},keyword:{pattern:/(^|[^\w-])(?:and|not|only|or)(?![\w-])/,lookbehind:!0}}},url:{pattern:RegExp("\\burl\\((?:"+E.source+"|"+/(?:[^\\\r\n()"']|\\[\s\S])*/.source+")\\)","i"),greedy:!0,inside:{function:/^url/i,punctuation:/^\(|\)$/,string:{pattern:RegExp("^"+E.source+"$"),alias:"url"}}},selector:{pattern:RegExp("(^|[{}\\s])[^{}\\s](?:[^{};\"'\\s]|\\s+(?![\\s{])|"+E.source+")*(?=\\s*\\{)"),lookbehind:!0},string:{pattern:E,greedy:!0},property:{pattern:/(^|[^-\w\xA0-\uFFFF])(?!\s)[-_a-z\xA0-\uFFFF](?:(?!\s)[-\w\xA0-\uFFFF])*(?=\s*:)/i,lookbehind:!0},important:/!important\b/i,function:{pattern:/(^|[^-a-z0-9])[-a-z0-9]+(?=\()/i,lookbehind:!0},punctuation:/[(){};:,]/},F.languages.css.atrule.inside.rest=F.languages.css;var i=F.languages.markup;i&&(i.tag.addInlined("style","css"),i.tag.addAttribute("style","css"))}(Prism)},3646:()=>{Prism.languages.javascript=Prism.languages.extend("clike",{"class-name":[Prism.languages.clike["class-name"],{pattern:/(^|[^$\w\xA0-\uFFFF])(?!\s)[_$A-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\.(?:constructor|prototype))/,lookbehind:!0}],keyword:[{pattern:/((?:^|\})\s*)catch\b/,lookbehind:!0},{pattern:/(^|[^.]|\.\.\.\s*)\b(?:as|assert(?=\s*\{)|async(?=\s*(?:function\b|\(|[$\w\xA0-\uFFFF]|$))|await|break|case|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally(?=\s*(?:\{|$))|for|from(?=\s*(?:['"]|$))|function|(?:get|set)(?=\s*(?:[#\[$\w\xA0-\uFFFF]|$))|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)\b/,lookbehind:!0}],function:/#?(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\s*(?:\.\s*(?:apply|bind|call)\s*)?\()/,number:{pattern:RegExp(/(^|[^\w$])/.source+"(?:"+/NaN|Infinity/.source+"|"+/0[bB][01]+(?:_[01]+)*n?/.source+"|"+/0[oO][0-7]+(?:_[0-7]+)*n?/.source+"|"+/0[xX][\dA-Fa-f]+(?:_[\dA-Fa-f]+)*n?/.source+"|"+/\d+(?:_\d+)*n/.source+"|"+/(?:\d+(?:_\d+)*(?:\.(?:\d+(?:_\d+)*)?)?|\.\d+(?:_\d+)*)(?:[Ee][+-]?\d+(?:_\d+)*)?/.source+")"+/(?![\w$])/.source),lookbehind:!0},operator:/--|\+\+|\*\*=?|=>|&&=?|\|\|=?|[!=]==|<<=?|>>>?=?|[-+*/%&|^!=<>]=?|\.{3}|\?\?=?|\?\.?|[~:]/}),Prism.languages.javascript["class-name"][0].pattern=/(\b(?:class|extends|implements|instanceof|interface|new)\s+)[\w.\\]+/,Prism.languages.insertBefore("javascript","keyword",{regex:{pattern:RegExp(/((?:^|[^$\w\xA0-\uFFFF."'\])\s]|\b(?:return|yield))\s*)/.source+/\//.source+"(?:"+/(?:\[(?:[^\]\\\r\n]|\\.)*\]|\\.|[^/\\\[\r\n])+\/[dgimyus]{0,7}/.source+"|"+/(?:\[(?:[^[\]\\\r\n]|\\.|\[(?:[^[\]\\\r\n]|\\.|\[(?:[^[\]\\\r\n]|\\.)*\])*\])*\]|\\.|[^/\\\[\r\n])+\/[dgimyus]{0,7}v[dgimyus]{0,7}/.source+")"+/(?=(?:\s|\/\*(?:[^*]|\*(?!\/))*\*\/)*(?:$|[\r\n,.;:})\]]|\/\/))/.source),lookbehind:!0,greedy:!0,inside:{"regex-source":{pattern:/^(\/)[\s\S]+(?=\/[a-z]*$)/,lookbehind:!0,alias:"language-regex",inside:Prism.languages.regex},"regex-delimiter":/^\/|\/$/,"regex-flags":/^[a-z]+$/}},"function-variable":{pattern:/#?(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\s*[=:]\s*(?:async\s*)?(?:\bfunction\b|(?:\((?:[^()]|\([^()]*\))*\)|(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*)\s*=>))/,alias:"function"},parameter:[{pattern:/(function(?:\s+(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*)?\s*\(\s*)(?!\s)(?:[^()\s]|\s+(?![\s)])|\([^()]*\))+(?=\s*\))/,lookbehind:!0,inside:Prism.languages.javascript},{pattern:/(^|[^$\w\xA0-\uFFFF])(?!\s)[_$a-z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\s*=>)/i,lookbehind:!0,inside:Prism.languages.javascript},{pattern:/(\(\s*)(?!\s)(?:[^()\s]|\s+(?![\s)])|\([^()]*\))+(?=\s*\)\s*=>)/,lookbehind:!0,inside:Prism.languages.javascript},{pattern:/((?:\b|\s|^)(?!(?:as|async|await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)(?![$\w\xA0-\uFFFF]))(?:(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*\s*)\(\s*|\]\s*\(\s*)(?!\s)(?:[^()\s]|\s+(?![\s)])|\([^()]*\))+(?=\s*\)\s*\{)/,lookbehind:!0,inside:Prism.languages.javascript}],constant:/\b[A-Z](?:[A-Z_]|\dx?)*\b/}),Prism.languages.insertBefore("javascript","string",{hashbang:{pattern:/^#!.*/,greedy:!0,alias:"comment"},"template-string":{pattern:/`(?:\\[\s\S]|\$\{(?:[^{}]|\{(?:[^{}]|\{[^}]*\})*\})+\}|(?!\$\{)[^\\`])*`/,greedy:!0,inside:{"template-punctuation":{pattern:/^`|`$/,alias:"string"},interpolation:{pattern:/((?:^|[^\\])(?:\\{2})*)\$\{(?:[^{}]|\{(?:[^{}]|\{[^}]*\})*\})+\}/,lookbehind:!0,inside:{"interpolation-punctuation":{pattern:/^\$\{|\}$/,alias:"punctuation"},rest:Prism.languages.javascript}},string:/[\s\S]+/}},"string-property":{pattern:/((?:^|[,{])[ \t]*)(["'])(?:\\(?:\r\n|[\s\S])|(?!\2)[^\\\r\n])*\2(?=\s*:)/m,lookbehind:!0,greedy:!0,alias:"property"}}),Prism.languages.insertBefore("javascript","operator",{"literal-property":{pattern:/((?:^|[,{])[ \t]*)(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\s*:)/m,lookbehind:!0,alias:"property"}}),Prism.languages.markup&&(Prism.languages.markup.tag.addInlined("script","javascript"),Prism.languages.markup.tag.addAttribute(/on(?:abort|blur|change|click|composition(?:end|start|update)|dblclick|error|focus(?:in|out)?|key(?:down|up)|load|mouse(?:down|enter|leave|move|out|over|up)|reset|resize|scroll|select|slotchange|submit|unload|wheel)/.source,"javascript")),Prism.languages.js=Prism.languages.javascript},787:()=>{!function(){function E(e){var d=document.createElement("textarea");d.value=e.getText(),d.style.top="0",d.style.left="0",d.style.position="fixed",document.body.appendChild(d),d.focus(),d.select();try{var a=document.execCommand("copy");setTimeout(function(){a?e.success():e.error()},1)}catch(l){setTimeout(function(){e.error(l)},1)}document.body.removeChild(d)}typeof Prism>"u"||typeof document>"u"||(Prism.plugins.toolbar?Prism.plugins.toolbar.registerButton("copy-to-clipboard",function(e){var d=e.element,a=function y(e){var d={copy:"Copy","copy-error":"Press Ctrl+C to copy","copy-success":"Copied!","copy-timeout":5e3};for(var l in d){for(var w="data-prismjs-"+l,m=e;m&&!m.hasAttribute(w);)m=m.parentElement;m&&(d[l]=m.getAttribute(w))}return d}(d),l=document.createElement("button");l.className="copy-to-clipboard-button",l.setAttribute("type","button");var w=document.createElement("span");return l.appendChild(w),x("copy"),function F(e,d){e.addEventListener("click",function(){!function i(e){navigator.clipboard?navigator.clipboard.writeText(e.getText()).then(e.success,function(){E(e)}):E(e)}(d)})}(l,{getText:function(){return d.textContent},success:function(){x("copy-success"),m()},error:function(){x("copy-error"),setTimeout(function(){!function h(e){window.getSelection().selectAllChildren(e)}(d)},1),m()}}),l;function m(){setTimeout(function(){x("copy")},a["copy-timeout"])}function x(P){w.textContent=a[P],l.setAttribute("data-copy-state",P)}}):console.warn("Copy to Clipboard plugin loaded before Toolbar plugin."))}()},5017:()=>{!function(){if(!(typeof Prism>"u"||typeof document>"u")){var F=[],E={},i=function(){};Prism.plugins.toolbar={};var h=Prism.plugins.toolbar.registerButton=function(d,a){var l;l="function"==typeof a?a:function(w){var m;return"function"==typeof a.onClick?((m=document.createElement("button")).type="button",m.addEventListener("click",function(){a.onClick.call(this,w)})):"string"==typeof a.url?(m=document.createElement("a")).href=a.url:m=document.createElement("span"),a.className&&m.classList.add(a.className),m.textContent=a.text,m},d in E?console.warn('There is a button with the key "'+d+'" registered already.'):F.push(E[d]=l)},e=Prism.plugins.toolbar.hook=function(d){var a=d.element.parentNode;if(a&&/pre/i.test(a.nodeName)&&!a.parentNode.classList.contains("code-toolbar")){var l=document.createElement("div");l.classList.add("code-toolbar"),a.parentNode.insertBefore(l,a),l.appendChild(a);var w=document.createElement("div");w.classList.add("toolbar");var m=F,x=function y(d){for(;d;){var a=d.getAttribute("data-toolbar-order");if(null!=a)return(a=a.trim()).length?a.split(/\s*,\s*/g):[];d=d.parentElement}}(d.element);x&&(m=x.map(function(P){return E[P]||i})),m.forEach(function(P){var I=P(d);if(I){var O=document.createElement("div");O.classList.add("toolbar-item"),O.appendChild(I),w.appendChild(O)}}),l.appendChild(w)}};h("label",function(d){var a=d.element.parentNode;if(a&&/pre/i.test(a.nodeName)&&a.hasAttribute("data-label")){var l,w,m=a.getAttribute("data-label");try{w=document.querySelector("template#"+m)}catch{}return w?l=w.content:(a.hasAttribute("data-url")?(l=document.createElement("a")).href=a.getAttribute("data-url"):l=document.createElement("span"),l.textContent=m),l}}),Prism.hooks.add("complete",e)}}()},9138:F=>{var i=function(h){var y=/(?:^|\s)lang(?:uage)?-([\w-]+)(?=\s|$)/i,e=0,d={},a={manual:h.Prism&&h.Prism.manual,disableWorkerMessageHandler:h.Prism&&h.Prism.disableWorkerMessageHandler,util:{encode:function n(t){return t instanceof l?new l(t.type,n(t.content),t.alias):Array.isArray(t)?t.map(n):t.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/\u00a0/g," ")},type:function(n){return Object.prototype.toString.call(n).slice(8,-1)},objId:function(n){return n.__id||Object.defineProperty(n,"__id",{value:++e}),n.__id},clone:function n(t,o){var r,s;switch(o=o||{},a.util.type(t)){case"Object":if(s=a.util.objId(t),o[s])return o[s];for(var c in o[s]=r={},t)t.hasOwnProperty(c)&&(r[c]=n(t[c],o));return r;case"Array":return s=a.util.objId(t),o[s]?o[s]:(o[s]=r=[],t.forEach(function(p,u){r[u]=n(p,o)}),r);default:return t}},getLanguage:function(n){for(;n;){var t=y.exec(n.className);if(t)return t[1].toLowerCase();n=n.parentElement}return"none"},setLanguage:function(n,t){n.className=n.className.replace(RegExp(y,"gi"),""),n.classList.add("language-"+t)},currentScript:function(){if(typeof document>"u")return null;if("currentScript"in document)return document.currentScript;try{throw new Error}catch(r){var n=(/at [^(\r\n]*\((.*):[^:]+:[^:]+\)$/i.exec(r.stack)||[])[1];if(n){var t=document.getElementsByTagName("script");for(var o in t)if(t[o].src==n)return t[o]}return null}},isActive:function(n,t,o){for(var r="no-"+t;n;){var s=n.classList;if(s.contains(t))return!0;if(s.contains(r))return!1;n=n.parentElement}return!!o}},languages:{plain:d,plaintext:d,text:d,txt:d,extend:function(n,t){var o=a.util.clone(a.languages[n]);for(var r in t)o[r]=t[r];return o},insertBefore:function(n,t,o,r){var s=(r=r||a.languages)[n],c={};for(var p in s)if(s.hasOwnProperty(p)){if(p==t)for(var u in o)o.hasOwnProperty(u)&&(c[u]=o[u]);o.hasOwnProperty(p)||(c[p]=s[p])}var v=r[n];return r[n]=c,a.languages.DFS(a.languages,function(T,M){M===v&&T!=n&&(this[T]=c)}),c},DFS:function n(t,o,r,s){s=s||{};var c=a.util.objId;for(var p in t)if(t.hasOwnProperty(p)){o.call(t,p,t[p],r||p);var u=t[p],v=a.util.type(u);"Object"!==v||s[c(u)]?"Array"===v&&!s[c(u)]&&(s[c(u)]=!0,n(u,o,p,s)):(s[c(u)]=!0,n(u,o,null,s))}}},plugins:{},highlightAll:function(n,t){a.highlightAllUnder(document,n,t)},highlightAllUnder:function(n,t,o){var r={callback:o,container:n,selector:'code[class*="language-"], [class*="language-"] code, code[class*="lang-"], [class*="lang-"] code'};a.hooks.run("before-highlightall",r),r.elements=Array.prototype.slice.apply(r.container.querySelectorAll(r.selector)),a.hooks.run("before-all-elements-highlight",r);for(var c,s=0;c=r.elements[s++];)a.highlightElement(c,!0===t,r.callback)},highlightElement:function(n,t,o){var r=a.util.getLanguage(n),s=a.languages[r];a.util.setLanguage(n,r);var c=n.parentElement;c&&"pre"===c.nodeName.toLowerCase()&&a.util.setLanguage(c,r);var u={element:n,language:r,grammar:s,code:n.textContent};function v(M){u.highlightedCode=M,a.hooks.run("before-insert",u),u.element.innerHTML=u.highlightedCode,a.hooks.run("after-highlight",u),a.hooks.run("complete",u),o&&o.call(u.element)}if(a.hooks.run("before-sanity-check",u),(c=u.element.parentElement)&&"pre"===c.nodeName.toLowerCase()&&!c.hasAttribute("tabindex")&&c.setAttribute("tabindex","0"),!u.code)return a.hooks.run("complete",u),void(o&&o.call(u.element));if(a.hooks.run("before-highlight",u),u.grammar)if(t&&h.Worker){var T=new Worker(a.filename);T.onmessage=function(M){v(M.data)},T.postMessage(JSON.stringify({language:u.language,code:u.code,immediateClose:!0}))}else v(a.highlight(u.code,u.grammar,u.language));else v(a.util.encode(u.code))},highlight:function(n,t,o){var r={code:n,grammar:t,language:o};if(a.hooks.run("before-tokenize",r),!r.grammar)throw new Error('The language "'+r.language+'" has no grammar.');return r.tokens=a.tokenize(r.code,r.grammar),a.hooks.run("after-tokenize",r),l.stringify(a.util.encode(r.tokens),r.language)},tokenize:function(n,t){var o=t.rest;if(o){for(var r in o)t[r]=o[r];delete t.rest}var s=new x;return P(s,s.head,n),m(n,s,t,s.head,0),function O(n){for(var t=[],o=n.head.next;o!==n.tail;)t.push(o.value),o=o.next;return t}(s)},hooks:{all:{},add:function(n,t){var o=a.hooks.all;o[n]=o[n]||[],o[n].push(t)},run:function(n,t){var o=a.hooks.all[n];if(o&&o.length)for(var s,r=0;s=o[r++];)s(t)}},Token:l};function l(n,t,o,r){this.type=n,this.content=t,this.alias=o,this.length=0|(r||"").length}function w(n,t,o,r){n.lastIndex=t;var s=n.exec(o);if(s&&r&&s[1]){var c=s[1].length;s.index+=c,s[0]=s[0].slice(c)}return s}function m(n,t,o,r,s,c){for(var p in o)if(o.hasOwnProperty(p)&&o[p]){var u=o[p];u=Array.isArray(u)?u:[u];for(var v=0;v<u.length;++v){if(c&&c.cause==p+","+v)return;var T=u[v],M=T.inside,L=!!T.lookbehind,g=!!T.greedy,X=T.alias;if(g&&!T.pattern.global){var b=T.pattern.toString().match(/[imsuy]*$/)[0];T.pattern=RegExp(T.pattern.source,b+"g")}for(var f=T.pattern||T,Z=r.next,q=s;Z!==t.tail&&!(c&&q>=c.reach);q+=Z.value.length,Z=Z.next){var k=Z.value;if(t.length>n.length)return;if(!(k instanceof l)){var C,D=1;if(g){if(!(C=w(f,q,n,L))||C.index>=n.length)break;var $=C.index,N=C.index+C[0].length,R=q;for(R+=Z.value.length;$>=R;)R+=(Z=Z.next).value.length;if(q=R-=Z.value.length,Z.value instanceof l)continue;for(var S=Z;S!==t.tail&&(R<N||"string"==typeof S.value);S=S.next)D++,R+=S.value.length;D--,k=n.slice(q,R),C.index-=q}else if(!(C=w(f,0,k,L)))continue;var z=C[0],j=k.slice(0,$=C.index),W=k.slice($+z.length),H=q+k.length;c&&H>c.reach&&(c.reach=H);var B=Z.prev;if(j&&(B=P(t,B,j),q+=j.length),I(t,B,D),Z=P(t,B,new l(p,M?a.tokenize(z,M):z,X,z)),W&&P(t,Z,W),D>1){var Q={cause:p+","+v,reach:H};m(n,t,o,Z.prev,q,Q),c&&Q.reach>c.reach&&(c.reach=Q.reach)}}}}}}function x(){var n={value:null,prev:null,next:null},t={value:null,prev:n,next:null};n.next=t,this.head=n,this.tail=t,this.length=0}function P(n,t,o){var r=t.next,s={value:o,prev:t,next:r};return t.next=s,r.prev=s,n.length++,s}function I(n,t,o){for(var r=t.next,s=0;s<o&&r!==n.tail;s++)r=r.next;t.next=r,r.prev=t,n.length-=s}if(h.Prism=a,l.stringify=function n(t,o){if("string"==typeof t)return t;if(Array.isArray(t)){var r="";return t.forEach(function(v){r+=n(v,o)}),r}var s={type:t.type,content:n(t.content,o),tag:"span",classes:["token",t.type],attributes:{},language:o},c=t.alias;c&&(Array.isArray(c)?Array.prototype.push.apply(s.classes,c):s.classes.push(c)),a.hooks.run("wrap",s);var p="";for(var u in s.attributes)p+=" "+u+'="'+(s.attributes[u]||"").replace(/"/g,"&quot;")+'"';return"<"+s.tag+' class="'+s.classes.join(" ")+'"'+p+">"+s.content+"</"+s.tag+">"},!h.document)return h.addEventListener&&(a.disableWorkerMessageHandler||h.addEventListener("message",function(n){var t=JSON.parse(n.data),o=t.language,s=t.immediateClose;h.postMessage(a.highlight(t.code,a.languages[o],o)),s&&h.close()},!1)),a;var U=a.util.currentScript();function _(){a.manual||a.highlightAll()}if(U&&(a.filename=U.src,U.hasAttribute("data-manual")&&(a.manual=!0)),!a.manual){var A=document.readyState;"loading"===A||"interactive"===A&&U&&U.defer?document.addEventListener("DOMContentLoaded",_):window.requestAnimationFrame?window.requestAnimationFrame(_):window.setTimeout(_,16)}return a}(typeof window<"u"?window:typeof WorkerGlobalScope<"u"&&self instanceof WorkerGlobalScope?self:{});F.exports&&(F.exports=i),typeof global<"u"&&(global.Prism=i),i.languages.markup={comment:{pattern:/<!--(?:(?!<!--)[\s\S])*?-->/,greedy:!0},prolog:{pattern:/<\?[\s\S]+?\?>/,greedy:!0},doctype:{pattern:/<!DOCTYPE(?:[^>"'[\]]|"[^"]*"|'[^']*')+(?:\[(?:[^<"'\]]|"[^"]*"|'[^']*'|<(?!!--)|<!--(?:[^-]|-(?!->))*-->)*\]\s*)?>/i,greedy:!0,inside:{"internal-subset":{pattern:/(^[^\[]*\[)[\s\S]+(?=\]>$)/,lookbehind:!0,greedy:!0,inside:null},string:{pattern:/"[^"]*"|'[^']*'/,greedy:!0},punctuation:/^<!|>$|[[\]]/,"doctype-tag":/^DOCTYPE/i,name:/[^\s<>'"]+/}},cdata:{pattern:/<!\[CDATA\[[\s\S]*?\]\]>/i,greedy:!0},tag:{pattern:/<\/?(?!\d)[^\s>\/=$<%]+(?:\s(?:\s*[^\s>\/=]+(?:\s*=\s*(?:"[^"]*"|'[^']*'|[^\s'">=]+(?=[\s>]))|(?=[\s/>])))+)?\s*\/?>/,greedy:!0,inside:{tag:{pattern:/^<\/?[^\s>\/]+/,inside:{punctuation:/^<\/?/,namespace:/^[^\s>\/:]+:/}},"special-attr":[],"attr-value":{pattern:/=\s*(?:"[^"]*"|'[^']*'|[^\s'">=]+)/,inside:{punctuation:[{pattern:/^=/,alias:"attr-equals"},{pattern:/^(\s*)["']|["']$/,lookbehind:!0}]}},punctuation:/\/?>/,"attr-name":{pattern:/[^\s>\/]+/,inside:{namespace:/^[^\s>\/:]+:/}}}},entity:[{pattern:/&[\da-z]{1,8};/i,alias:"named-entity"},/&#x?[\da-f]{1,8};/i]},i.languages.markup.tag.inside["attr-value"].inside.entity=i.languages.markup.entity,i.languages.markup.doctype.inside["internal-subset"].inside=i.languages.markup,i.hooks.add("wrap",function(h){"entity"===h.type&&(h.attributes.title=h.content.replace(/&amp;/,"&"))}),Object.defineProperty(i.languages.markup.tag,"addInlined",{value:function(y,e){var d={};d["language-"+e]={pattern:/(^<!\[CDATA\[)[\s\S]+?(?=\]\]>$)/i,lookbehind:!0,inside:i.languages[e]},d.cdata=/^<!\[CDATA\[|\]\]>$/i;var a={"included-cdata":{pattern:/<!\[CDATA\[[\s\S]*?\]\]>/i,inside:d}};a["language-"+e]={pattern:/[\s\S]+/,inside:i.languages[e]};var l={};l[y]={pattern:RegExp(/(<__[^>]*>)(?:<!\[CDATA\[(?:[^\]]|\](?!\]>))*\]\]>|(?!<!\[CDATA\[)[\s\S])*?(?=<\/__>)/.source.replace(/__/g,function(){return y}),"i"),lookbehind:!0,greedy:!0,inside:a},i.languages.insertBefore("markup","cdata",l)}}),Object.defineProperty(i.languages.markup.tag,"addAttribute",{value:function(h,y){i.languages.markup.tag.inside["special-attr"].push({pattern:RegExp(/(^|["'\s])/.source+"(?:"+h+")"+/\s*=\s*(?:"[^"]*"|'[^']*'|[^\s'">=]+(?=[\s>]))/.source,"i"),lookbehind:!0,inside:{"attr-name":/^[^\s=]+/,"attr-value":{pattern:/=[\s\S]+/,inside:{value:{pattern:/(^=\s*(["']|(?!["'])))\S[\s\S]*(?=\2$)/,lookbehind:!0,alias:[y,"language-"+y],inside:i.languages[y]},punctuation:[{pattern:/^=/,alias:"attr-equals"},/"|'/]}}}})}}),i.languages.html=i.languages.markup,i.languages.mathml=i.languages.markup,i.languages.svg=i.languages.markup,i.languages.xml=i.languages.extend("markup",{}),i.languages.ssml=i.languages.xml,i.languages.atom=i.languages.xml,i.languages.rss=i.languages.xml,function(h){var y=/(?:"(?:\\(?:\r\n|[\s\S])|[^"\\\r\n])*"|'(?:\\(?:\r\n|[\s\S])|[^'\\\r\n])*')/;h.languages.css={comment:/\/\*[\s\S]*?\*\//,atrule:{pattern:RegExp("@[\\w-](?:"+/[^;{\s"']|\s+(?!\s)/.source+"|"+y.source+")*?"+/(?:;|(?=\s*\{))/.source),inside:{rule:/^@[\w-]+/,"selector-function-argument":{pattern:/(\bselector\s*\(\s*(?![\s)]))(?:[^()\s]|\s+(?![\s)])|\((?:[^()]|\([^()]*\))*\))+(?=\s*\))/,lookbehind:!0,alias:"selector"},keyword:{pattern:/(^|[^\w-])(?:and|not|only|or)(?![\w-])/,lookbehind:!0}}},url:{pattern:RegExp("\\burl\\((?:"+y.source+"|"+/(?:[^\\\r\n()"']|\\[\s\S])*/.source+")\\)","i"),greedy:!0,inside:{function:/^url/i,punctuation:/^\(|\)$/,string:{pattern:RegExp("^"+y.source+"$"),alias:"url"}}},selector:{pattern:RegExp("(^|[{}\\s])[^{}\\s](?:[^{};\"'\\s]|\\s+(?![\\s{])|"+y.source+")*(?=\\s*\\{)"),lookbehind:!0},string:{pattern:y,greedy:!0},property:{pattern:/(^|[^-\w\xA0-\uFFFF])(?!\s)[-_a-z\xA0-\uFFFF](?:(?!\s)[-\w\xA0-\uFFFF])*(?=\s*:)/i,lookbehind:!0},important:/!important\b/i,function:{pattern:/(^|[^-a-z0-9])[-a-z0-9]+(?=\()/i,lookbehind:!0},punctuation:/[(){};:,]/},h.languages.css.atrule.inside.rest=h.languages.css;var e=h.languages.markup;e&&(e.tag.addInlined("style","css"),e.tag.addAttribute("style","css"))}(i),i.languages.clike={comment:[{pattern:/(^|[^\\])\/\*[\s\S]*?(?:\*\/|$)/,lookbehind:!0,greedy:!0},{pattern:/(^|[^\\:])\/\/.*/,lookbehind:!0,greedy:!0}],string:{pattern:/(["'])(?:\\(?:\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1/,greedy:!0},"class-name":{pattern:/(\b(?:class|extends|implements|instanceof|interface|new|trait)\s+|\bcatch\s+\()[\w.\\]+/i,lookbehind:!0,inside:{punctuation:/[.\\]/}},keyword:/\b(?:break|catch|continue|do|else|finally|for|function|if|in|instanceof|new|null|return|throw|try|while)\b/,boolean:/\b(?:false|true)\b/,function:/\b\w+(?=\()/,number:/\b0x[\da-f]+\b|(?:\b\d+(?:\.\d*)?|\B\.\d+)(?:e[+-]?\d+)?/i,operator:/[<>]=?|[!=]=?=?|--?|\+\+?|&&?|\|\|?|[?*/~^%]/,punctuation:/[{}[\];(),.:]/},i.languages.javascript=i.languages.extend("clike",{"class-name":[i.languages.clike["class-name"],{pattern:/(^|[^$\w\xA0-\uFFFF])(?!\s)[_$A-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\.(?:constructor|prototype))/,lookbehind:!0}],keyword:[{pattern:/((?:^|\})\s*)catch\b/,lookbehind:!0},{pattern:/(^|[^.]|\.\.\.\s*)\b(?:as|assert(?=\s*\{)|async(?=\s*(?:function\b|\(|[$\w\xA0-\uFFFF]|$))|await|break|case|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally(?=\s*(?:\{|$))|for|from(?=\s*(?:['"]|$))|function|(?:get|set)(?=\s*(?:[#\[$\w\xA0-\uFFFF]|$))|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)\b/,lookbehind:!0}],function:/#?(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\s*(?:\.\s*(?:apply|bind|call)\s*)?\()/,number:{pattern:RegExp(/(^|[^\w$])/.source+"(?:"+/NaN|Infinity/.source+"|"+/0[bB][01]+(?:_[01]+)*n?/.source+"|"+/0[oO][0-7]+(?:_[0-7]+)*n?/.source+"|"+/0[xX][\dA-Fa-f]+(?:_[\dA-Fa-f]+)*n?/.source+"|"+/\d+(?:_\d+)*n/.source+"|"+/(?:\d+(?:_\d+)*(?:\.(?:\d+(?:_\d+)*)?)?|\.\d+(?:_\d+)*)(?:[Ee][+-]?\d+(?:_\d+)*)?/.source+")"+/(?![\w$])/.source),lookbehind:!0},operator:/--|\+\+|\*\*=?|=>|&&=?|\|\|=?|[!=]==|<<=?|>>>?=?|[-+*/%&|^!=<>]=?|\.{3}|\?\?=?|\?\.?|[~:]/}),i.languages.javascript["class-name"][0].pattern=/(\b(?:class|extends|implements|instanceof|interface|new)\s+)[\w.\\]+/,i.languages.insertBefore("javascript","keyword",{regex:{pattern:RegExp(/((?:^|[^$\w\xA0-\uFFFF."'\])\s]|\b(?:return|yield))\s*)/.source+/\//.source+"(?:"+/(?:\[(?:[^\]\\\r\n]|\\.)*\]|\\.|[^/\\\[\r\n])+\/[dgimyus]{0,7}/.source+"|"+/(?:\[(?:[^[\]\\\r\n]|\\.|\[(?:[^[\]\\\r\n]|\\.|\[(?:[^[\]\\\r\n]|\\.)*\])*\])*\]|\\.|[^/\\\[\r\n])+\/[dgimyus]{0,7}v[dgimyus]{0,7}/.source+")"+/(?=(?:\s|\/\*(?:[^*]|\*(?!\/))*\*\/)*(?:$|[\r\n,.;:})\]]|\/\/))/.source),lookbehind:!0,greedy:!0,inside:{"regex-source":{pattern:/^(\/)[\s\S]+(?=\/[a-z]*$)/,lookbehind:!0,alias:"language-regex",inside:i.languages.regex},"regex-delimiter":/^\/|\/$/,"regex-flags":/^[a-z]+$/}},"function-variable":{pattern:/#?(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\s*[=:]\s*(?:async\s*)?(?:\bfunction\b|(?:\((?:[^()]|\([^()]*\))*\)|(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*)\s*=>))/,alias:"function"},parameter:[{pattern:/(function(?:\s+(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*)?\s*\(\s*)(?!\s)(?:[^()\s]|\s+(?![\s)])|\([^()]*\))+(?=\s*\))/,lookbehind:!0,inside:i.languages.javascript},{pattern:/(^|[^$\w\xA0-\uFFFF])(?!\s)[_$a-z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\s*=>)/i,lookbehind:!0,inside:i.languages.javascript},{pattern:/(\(\s*)(?!\s)(?:[^()\s]|\s+(?![\s)])|\([^()]*\))+(?=\s*\)\s*=>)/,lookbehind:!0,inside:i.languages.javascript},{pattern:/((?:\b|\s|^)(?!(?:as|async|await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)(?![$\w\xA0-\uFFFF]))(?:(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*\s*)\(\s*|\]\s*\(\s*)(?!\s)(?:[^()\s]|\s+(?![\s)])|\([^()]*\))+(?=\s*\)\s*\{)/,lookbehind:!0,inside:i.languages.javascript}],constant:/\b[A-Z](?:[A-Z_]|\dx?)*\b/}),i.languages.insertBefore("javascript","string",{hashbang:{pattern:/^#!.*/,greedy:!0,alias:"comment"},"template-string":{pattern:/`(?:\\[\s\S]|\$\{(?:[^{}]|\{(?:[^{}]|\{[^}]*\})*\})+\}|(?!\$\{)[^\\`])*`/,greedy:!0,inside:{"template-punctuation":{pattern:/^`|`$/,alias:"string"},interpolation:{pattern:/((?:^|[^\\])(?:\\{2})*)\$\{(?:[^{}]|\{(?:[^{}]|\{[^}]*\})*\})+\}/,lookbehind:!0,inside:{"interpolation-punctuation":{pattern:/^\$\{|\}$/,alias:"punctuation"},rest:i.languages.javascript}},string:/[\s\S]+/}},"string-property":{pattern:/((?:^|[,{])[ \t]*)(["'])(?:\\(?:\r\n|[\s\S])|(?!\2)[^\\\r\n])*\2(?=\s*:)/m,lookbehind:!0,greedy:!0,alias:"property"}}),i.languages.insertBefore("javascript","operator",{"literal-property":{pattern:/((?:^|[,{])[ \t]*)(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\s*:)/m,lookbehind:!0,alias:"property"}}),i.languages.markup&&(i.languages.markup.tag.addInlined("script","javascript"),i.languages.markup.tag.addAttribute(/on(?:abort|blur|change|click|composition(?:end|start|update)|dblclick|error|focus(?:in|out)?|key(?:down|up)|load|mouse(?:down|enter|leave|move|out|over|up)|reset|resize|scroll|select|slotchange|submit|unload|wheel)/.source,"javascript")),i.languages.js=i.languages.javascript,function(){if(!(typeof i>"u"||typeof document>"u")){Element.prototype.matches||(Element.prototype.matches=Element.prototype.msMatchesSelector||Element.prototype.webkitMatchesSelector);var d={js:"javascript",py:"python",rb:"ruby",ps1:"powershell",psm1:"powershell",sh:"bash",bat:"batch",h:"c",tex:"latex"},a="data-src-status",l="loading",w="loaded",x="pre[data-src]:not(["+a+'="'+w+'"]):not(['+a+'="'+l+'"])';i.hooks.add("before-highlightall",function(U){U.selector+=", "+x}),i.hooks.add("before-sanity-check",function(U){var _=U.element;if(_.matches(x)){U.code="",_.setAttribute(a,l);var A=_.appendChild(document.createElement("CODE"));A.textContent="Loading\u2026";var n=_.getAttribute("data-src"),t=U.language;if("none"===t){var o=(/\.(\w+)$/.exec(n)||[,"none"])[1];t=d[o]||o}i.util.setLanguage(A,t),i.util.setLanguage(_,t);var r=i.plugins.autoloader;r&&r.loadLanguages(t),function P(U,_,A){var n=new XMLHttpRequest;n.open("GET",U,!0),n.onreadystatechange=function(){4==n.readyState&&(n.status<400&&n.responseText?_(n.responseText):A(n.status>=400?function(U,_){return"\u2716 Error "+U+" while fetching file: "+_}(n.status,n.statusText):"\u2716 Error: File does not exist or is empty"))},n.send(null)}(n,function(s){_.setAttribute(a,w);var c=function I(U){var _=/^\s*(\d+)\s*(?:(,)\s*(?:(\d+)\s*)?)?$/.exec(U||"");if(_){var A=Number(_[1]),t=_[3];return _[2]?t?[A,Number(t)]:[A,void 0]:[A,A]}}(_.getAttribute("data-range"));if(c){var p=s.split(/\r\n?|\n/g),u=c[0],v=null==c[1]?p.length:c[1];u<0&&(u+=p.length),u=Math.max(0,Math.min(u-1,p.length)),v<0&&(v+=p.length),v=Math.max(0,Math.min(v,p.length)),s=p.slice(u,v).join("\n"),_.hasAttribute("data-start")||_.setAttribute("data-start",String(u+1))}A.textContent=s,i.highlightElement(A)},function(s){_.setAttribute(a,"failed"),A.textContent=s})}}),i.plugins.fileHighlight={highlight:function(_){for(var t,A=(_||document).querySelectorAll(x),n=0;t=A[n++];)i.highlightElement(t)}};var O=!1;i.fileHighlight=function(){O||(console.warn("Prism.fileHighlight is deprecated. Use `Prism.plugins.fileHighlight.highlight` instead."),O=!0),i.plugins.fileHighlight.highlight.apply(this,arguments)}}}()}}]);